diff --git a/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-annotations.txt b/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-annotations.txt
index 93437ef1e0..4e9248fd01 100644
--- a/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-annotations.txt
+++ b/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-annotations.txt
@@ -1,2 +1,2 @@
-Comparing source compatibility of opentelemetry-instrumentation-annotations-2.11.0.jar against opentelemetry-instrumentation-annotations-2.10.0.jar
-No changes.
\ No newline at end of file
+Comparing source compatibility of opentelemetry-instrumentation-annotations-2.11.0-adot1.jar against opentelemetry-instrumentation-annotations-2.11.0.jar
+No changes.
diff --git a/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-api.txt b/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-api.txt
index d759eed30a..1c725a0a25 100644
--- a/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-api.txt
+++ b/docs/apidiffs/current_vs_latest/opentelemetry-instrumentation-api.txt
@@ -1,2 +1,2 @@
-Comparing source compatibility of opentelemetry-instrumentation-api-2.11.0.jar against opentelemetry-instrumentation-api-2.10.0.jar
-No changes.
\ No newline at end of file
+Comparing source compatibility of opentelemetry-instrumentation-api-2.11.0-adot1.jar against opentelemetry-instrumentation-api-2.11.0.jar
+No changes.
diff --git a/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-autoconfigure.txt b/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-autoconfigure.txt
index f657f219ae..a6ec574fe5 100644
--- a/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-autoconfigure.txt
+++ b/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-autoconfigure.txt
@@ -1,2 +1,2 @@
-Comparing source compatibility of opentelemetry-spring-boot-autoconfigure-2.11.0.jar against opentelemetry-spring-boot-autoconfigure-2.10.0.jar
-No changes.
\ No newline at end of file
+Comparing source compatibility of opentelemetry-spring-boot-autoconfigure-2.11.0-adot1.jar against opentelemetry-spring-boot-autoconfigure-2.11.0.jar
+No changes.
diff --git a/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-starter.txt b/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-starter.txt
index 02f520fd45..2109c5a927 100644
--- a/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-starter.txt
+++ b/docs/apidiffs/current_vs_latest/opentelemetry-spring-boot-starter.txt
@@ -1,2 +1,2 @@
-Comparing source compatibility of opentelemetry-spring-boot-starter-2.11.0.jar against opentelemetry-spring-boot-starter-2.10.0.jar
-No changes.
\ No newline at end of file
+Comparing source compatibility of opentelemetry-spring-boot-starter-2.11.0-adot1.jar against opentelemetry-spring-boot-starter-2.11.0.jar
+No changes.
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
index f357a19f88..fa90530579 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
@@ -47,6 +47,14 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-kinesis:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   testImplementation(project(":instrumentation:aws-sdk:aws-sdk-1.11:testing"))
 
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/java/io/opentelemetry/javaagent/instrumentation/awssdk/v1_11/AwsSpanAssertions.java b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/java/io/opentelemetry/javaagent/instrumentation/awssdk/v1_11/AwsSpanAssertions.java
index 483a0c5230..2415577e37 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/java/io/opentelemetry/javaagent/instrumentation/awssdk/v1_11/AwsSpanAssertions.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/java/io/opentelemetry/javaagent/instrumentation/awssdk/v1_11/AwsSpanAssertions.java
@@ -85,11 +85,35 @@ class AwsSpanAssertions {
   }
 
   static SpanDataAssert sns(SpanDataAssert span, String topicArn, String rpcMethod) {
-
-    return span.hasName("SNS." + rpcMethod)
+    SpanDataAssert spanAssert = span.hasName("SNS." + rpcMethod)
         .hasKind(SpanKind.CLIENT)
-        .hasNoParent()
-        .hasAttributesSatisfyingExactly(
+        .hasNoParent();
+
+    // For CreateTopic, the topicArn parameter might be null but aws.sns.topic.arn 
+    // will be set from the response
+    if ("CreateTopic".equals(rpcMethod)) {
+      return spanAssert.hasAttributesSatisfyingExactly(
+            equalTo(stringKey("aws.agent"), "java-aws-sdk"),
+            satisfies(stringKey("aws.endpoint"), v -> v.isInstanceOf(String.class)),
+            satisfies(AWS_REQUEST_ID, v -> v.isInstanceOf(String.class)),
+            equalTo(RPC_METHOD, rpcMethod),
+            equalTo(RPC_SYSTEM, "aws-api"),
+            equalTo(RPC_SERVICE, "AmazonSNS"),
+            equalTo(HTTP_REQUEST_METHOD, "POST"),
+            equalTo(HTTP_RESPONSE_STATUS_CODE, 200),
+            satisfies(URL_FULL, val -> val.startsWith("http://")),
+            satisfies(SERVER_ADDRESS, v -> v.isInstanceOf(String.class)),
+            equalTo(NETWORK_PROTOCOL_VERSION, "1.1"),
+            satisfies(
+                SERVER_PORT,
+                val ->
+                    val.satisfiesAnyOf(
+                        v -> assertThat(v).isNull(),
+                        v -> assertThat(v).isInstanceOf(Number.class))),
+            satisfies(stringKey("aws.sns.topic.arn"), v -> v.isInstanceOf(String.class)));
+    }
+
+    return spanAssert.hasAttributesSatisfyingExactly(
             equalTo(stringKey("aws.agent"), "java-aws-sdk"),
             equalTo(MESSAGING_DESTINATION_NAME, topicArn),
             satisfies(stringKey("aws.endpoint"), v -> v.isInstanceOf(String.class)),
@@ -107,6 +131,7 @@ class AwsSpanAssertions {
                 val ->
                     val.satisfiesAnyOf(
                         v -> assertThat(v).isNull(),
-                        v -> assertThat(v).isInstanceOf(Number.class))));
+                        v -> assertThat(v).isInstanceOf(Number.class))),
+            equalTo(stringKey("aws.sns.topic.arn"), topicArn));
   }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
index 6cf49a21c4..3705634153 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
@@ -18,6 +18,13 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // last version that does not use json protocol
   latestDepTestLibrary("com.amazonaws:aws-java-sdk-sqs:1.12.583")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
index bfe844e413..dec4935b55 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
@@ -17,6 +17,14 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-kinesis:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // last version that does not use json protocol
   latestDepTestLibrary("com.amazonaws:aws-java-sdk-sqs:1.12.583")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java
new file mode 100644
index 0000000000..e890cb3c0f
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_DATA_SOURCE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_KNOWLEDGE_BASE_ID;
+
+import io.opentelemetry.api.common.AttributeKey;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+
+enum AwsBedrockResourceType {
+  AGENT_TYPE(AWS_AGENT_ID, RequestAccess::getAgentId),
+  DATA_SOURCE_TYPE(AWS_DATA_SOURCE_ID, RequestAccess::getDataSourceId),
+  KNOWLEDGE_BASE_TYPE(AWS_KNOWLEDGE_BASE_ID, RequestAccess::getKnowledgeBaseId);
+
+  @SuppressWarnings("ImmutableEnumChecker")
+  private final AttributeKey<String> keyAttribute;
+
+  @SuppressWarnings("ImmutableEnumChecker")
+  private final Function<Object, String> attributeValueAccessor;
+
+  AwsBedrockResourceType(
+      AttributeKey<String> keyAttribute, Function<Object, String> attributeValueAccessor) {
+    this.keyAttribute = keyAttribute;
+    this.attributeValueAccessor = attributeValueAccessor;
+  }
+
+  public AttributeKey<String> getKeyAttribute() {
+    return keyAttribute;
+  }
+
+  public Function<Object, String> getAttributeValueAccessor() {
+    return attributeValueAccessor;
+  }
+
+  public static AwsBedrockResourceType getRequestType(String requestClass) {
+    return AwsBedrockResourceTypeMap.BEDROCK_REQUEST_MAP.get(requestClass);
+  }
+
+  public static AwsBedrockResourceType getResponseType(String responseClass) {
+    return AwsBedrockResourceTypeMap.BEDROCK_RESPONSE_MAP.get(responseClass);
+  }
+
+  private static class AwsBedrockResourceTypeMap {
+    private static final Map<String, AwsBedrockResourceType> BEDROCK_REQUEST_MAP = new HashMap<>();
+    private static final Map<String, AwsBedrockResourceType> BEDROCK_RESPONSE_MAP = new HashMap<>();
+
+    // Bedrock request/response mapping
+    // We only support operations that are related to the resource and where the context contains
+    // the AgentID/DataSourceID/KnowledgeBaseID.
+    // AgentID
+    private static final List<String> agentRequestClasses =
+        Arrays.asList(
+            "CreateAgentActionGroupRequest",
+            "CreateAgentAliasRequest",
+            "DeleteAgentActionGroupRequest",
+            "DeleteAgentAliasRequest",
+            "DeleteAgentRequest",
+            "DeleteAgentVersionRequest",
+            "GetAgentActionGroupRequest",
+            "GetAgentAliasRequest",
+            "GetAgentRequest",
+            "GetAgentVersionRequest",
+            "ListAgentActionGroupsRequest",
+            "ListAgentAliasesRequest",
+            "ListAgentKnowledgeBasesRequest",
+            "ListAgentVersionsRequest",
+            "PrepareAgentRequest",
+            "UpdateAgentActionGroupRequest",
+            "UpdateAgentAliasRequest",
+            "UpdateAgentRequest");
+    private static final List<String> agentResponseClasses =
+        Arrays.asList(
+            "DeleteAgentAliasResult",
+            "DeleteAgentResult",
+            "DeleteAgentVersionResult",
+            "PrepareAgentResult");
+    // DataSourceID
+    private static final List<String> dataSourceRequestClasses =
+        Arrays.asList("DeleteDataSourceRequest", "GetDataSourceRequest", "UpdateDataSourceRequest");
+    private static final List<String> dataSourceResponseClasses =
+        Arrays.asList("DeleteDataSourceResult");
+    // KnowledgeBaseID
+    private static final List<String> knowledgeBaseRequestClasses =
+        Arrays.asList(
+            "AssociateAgentKnowledgeBaseRequest",
+            "CreateDataSourceRequest",
+            "DeleteKnowledgeBaseRequest",
+            "DisassociateAgentKnowledgeBaseRequest",
+            "GetAgentKnowledgeBaseRequest",
+            "GetKnowledgeBaseRequest",
+            "ListDataSourcesRequest",
+            "UpdateAgentKnowledgeBaseRequest");
+    private static final List<String> knowledgeBaseResponseClasses =
+        Arrays.asList("DeleteKnowledgeBaseResult");
+
+    private AwsBedrockResourceTypeMap() {}
+
+    static {
+      // Populate the BEDROCK_REQUEST_MAP
+      for (String agentRequestClass : agentRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(agentRequestClass, AwsBedrockResourceType.AGENT_TYPE);
+      }
+      for (String dataSourceRequestClass : dataSourceRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(dataSourceRequestClass, AwsBedrockResourceType.DATA_SOURCE_TYPE);
+      }
+      for (String knowledgeBaseRequestClass : knowledgeBaseRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(
+            knowledgeBaseRequestClass, AwsBedrockResourceType.KNOWLEDGE_BASE_TYPE);
+      }
+
+      // Populate the BEDROCK_RESPONSE_MAP
+      for (String agentResponseClass : agentResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(agentResponseClass, AwsBedrockResourceType.AGENT_TYPE);
+      }
+      for (String dataSourceResponseClass : dataSourceResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(dataSourceResponseClass, AwsBedrockResourceType.DATA_SOURCE_TYPE);
+      }
+      for (String knowledgeBaseResponseClass : knowledgeBaseResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(
+            knowledgeBaseResponseClass, AwsBedrockResourceType.KNOWLEDGE_BASE_TYPE);
+      }
+    }
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
index 096c7826a1..a271b16da8 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
@@ -17,6 +17,36 @@ final class AwsExperimentalAttributes {
   static final AttributeKey<String> AWS_QUEUE_NAME = stringKey("aws.queue.name");
   static final AttributeKey<String> AWS_STREAM_NAME = stringKey("aws.stream.name");
   static final AttributeKey<String> AWS_TABLE_NAME = stringKey("aws.table.name");
+  static final AttributeKey<String> AWS_AGENT_ID = stringKey("aws.bedrock.agent.id");
+  static final AttributeKey<String> AWS_KNOWLEDGE_BASE_ID =
+      stringKey("aws.bedrock.knowledge_base.id");
+  static final AttributeKey<String> AWS_DATA_SOURCE_ID = stringKey("aws.bedrock.data_source.id");
+  static final AttributeKey<String> AWS_GUARDRAIL_ID = stringKey("aws.bedrock.guardrail.id");
+  static final AttributeKey<String> AWS_GUARDRAIL_ARN = stringKey("aws.bedrock.guardrail.arn");
+  // TODO: Merge in gen_ai attributes in opentelemetry-semconv-incubating once upgrade to v1.26.0
+  static final AttributeKey<String> AWS_BEDROCK_RUNTIME_MODEL_ID =
+      stringKey("gen_ai.request.model");
+  static final AttributeKey<String> AWS_BEDROCK_SYSTEM = stringKey("gen_ai.system");
+  static final AttributeKey<String> GEN_AI_REQUEST_MAX_TOKENS =
+      stringKey("gen_ai.request.max_tokens");
+  static final AttributeKey<String> GEN_AI_REQUEST_TEMPERATURE =
+      stringKey("gen_ai.request.temperature");
+  static final AttributeKey<String> GEN_AI_REQUEST_TOP_P = stringKey("gen_ai.request.top_p");
+  static final AttributeKey<String> GEN_AI_RESPONSE_FINISH_REASONS =
+      stringKey("gen_ai.response.finish_reasons");
+  static final AttributeKey<String> GEN_AI_USAGE_INPUT_TOKENS =
+      stringKey("gen_ai.usage.input_tokens");
+  static final AttributeKey<String> GEN_AI_USAGE_OUTPUT_TOKENS =
+      stringKey("gen_ai.usage.output_tokens");
+  static final AttributeKey<String> AWS_STATE_MACHINE_ARN =
+      stringKey("aws.stepfunctions.state_machine.arn");
+  static final AttributeKey<String> AWS_STEP_FUNCTIONS_ACTIVITY_ARN =
+      stringKey("aws.stepfunctions.activity.arn");
+  static final AttributeKey<String> AWS_SNS_TOPIC_ARN = stringKey("aws.sns.topic.arn");
+  static final AttributeKey<String> AWS_SECRET_ARN = stringKey("aws.secretsmanager.secret.arn");
+  static final AttributeKey<String> AWS_LAMBDA_NAME = stringKey("aws.lambda.function.name");
+  static final AttributeKey<String> AWS_LAMBDA_RESOURCE_ID =
+      stringKey("aws.lambda.resource_mapping.id");
 
   private AwsExperimentalAttributes() {}
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
index 541e67d23b..1abf8e9c28 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
@@ -6,12 +6,30 @@
 package io.opentelemetry.instrumentation.awssdk.v1_11;
 
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BEDROCK_RUNTIME_MODEL_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BEDROCK_SYSTEM;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BUCKET_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_ENDPOINT;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_GUARDRAIL_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_GUARDRAIL_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_KNOWLEDGE_BASE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_LAMBDA_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_LAMBDA_RESOURCE_ID;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_QUEUE_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_QUEUE_URL;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_SECRET_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_SNS_TOPIC_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STATE_MACHINE_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STEP_FUNCTIONS_ACTIVITY_ARN;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STREAM_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_TABLE_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_MAX_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_TEMPERATURE;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_TOP_P;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_RESPONSE_FINISH_REASONS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_USAGE_INPUT_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_USAGE_OUTPUT_TOKENS;
 
 import com.amazonaws.Request;
 import com.amazonaws.Response;
@@ -19,12 +37,17 @@ import io.opentelemetry.api.common.AttributeKey;
 import io.opentelemetry.api.common.AttributesBuilder;
 import io.opentelemetry.context.Context;
 import io.opentelemetry.instrumentation.api.instrumenter.AttributesExtractor;
+import java.util.Objects;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 
 class AwsSdkExperimentalAttributesExtractor
     implements AttributesExtractor<Request<?>, Response<?>> {
   private static final String COMPONENT_NAME = "java-aws-sdk";
+  private static final String BEDROCK_SERVICE = "AmazonBedrock";
+  private static final String BEDROCK_AGENT_SERVICE = "AWSBedrockAgent";
+  private static final String BEDROCK_AGENT_RUNTIME_SERVICE = "AWSBedrockAgentRuntime";
+  private static final String BEDROCK_RUNTIME_SERVICE = "AmazonBedrockRuntime";
 
   @Override
   public void onStart(AttributesBuilder attributes, Context parentContext, Request<?> request) {
@@ -32,14 +55,155 @@ class AwsSdkExperimentalAttributesExtractor
     attributes.put(AWS_ENDPOINT, request.getEndpoint().toString());
 
     Object originalRequest = request.getOriginalRequest();
-    setRequestAttribute(attributes, AWS_BUCKET_NAME, originalRequest, RequestAccess::getBucketName);
-    setRequestAttribute(attributes, AWS_QUEUE_URL, originalRequest, RequestAccess::getQueueUrl);
-    setRequestAttribute(attributes, AWS_QUEUE_NAME, originalRequest, RequestAccess::getQueueName);
-    setRequestAttribute(attributes, AWS_STREAM_NAME, originalRequest, RequestAccess::getStreamName);
-    setRequestAttribute(attributes, AWS_TABLE_NAME, originalRequest, RequestAccess::getTableName);
+    String requestClassName = originalRequest.getClass().getSimpleName();
+    setAttribute(attributes, AWS_BUCKET_NAME, originalRequest, RequestAccess::getBucketName);
+    setAttribute(attributes, AWS_QUEUE_URL, originalRequest, RequestAccess::getQueueUrl);
+    setAttribute(attributes, AWS_QUEUE_NAME, originalRequest, RequestAccess::getQueueName);
+    setAttribute(attributes, AWS_STREAM_NAME, originalRequest, RequestAccess::getStreamName);
+    setAttribute(attributes, AWS_TABLE_NAME, originalRequest, RequestAccess::getTableName);
+    setAttribute(
+        attributes, AWS_STATE_MACHINE_ARN, originalRequest, RequestAccess::getStateMachineArn);
+    setAttribute(
+        attributes,
+        AWS_STEP_FUNCTIONS_ACTIVITY_ARN,
+        originalRequest,
+        RequestAccess::getStepFunctionsActivityArn);
+    setAttribute(attributes, AWS_SNS_TOPIC_ARN, originalRequest, RequestAccess::getSnsTopicArn);
+    setAttribute(attributes, AWS_SECRET_ARN, originalRequest, RequestAccess::getSecretArn);
+    setAttribute(attributes, AWS_LAMBDA_NAME, originalRequest, RequestAccess::getLambdaName);
+    setAttribute(
+        attributes, AWS_LAMBDA_RESOURCE_ID, originalRequest, RequestAccess::getLambdaResourceId);
+    // Get serviceName defined in the AWS Java SDK V1 Request class.
+    String serviceName = request.getServiceName();
+    // Extract request attributes only for Bedrock services.
+    if (isBedrockService(serviceName)) {
+      bedrockOnStart(attributes, originalRequest, requestClassName, serviceName);
+    }
+  }
+
+  @Override
+  public void onEnd(
+      AttributesBuilder attributes,
+      Context context,
+      Request<?> request,
+      @Nullable Response<?> response,
+      @Nullable Throwable error) {
+    if (response != null) {
+      Object awsResp = response.getAwsResponse();
+      setAttribute(attributes, AWS_STATE_MACHINE_ARN, awsResp, RequestAccess::getStateMachineArn);
+      setAttribute(
+          attributes,
+          AWS_STEP_FUNCTIONS_ACTIVITY_ARN,
+          awsResp,
+          RequestAccess::getStepFunctionsActivityArn);
+      setAttribute(attributes, AWS_SNS_TOPIC_ARN, awsResp, RequestAccess::getSnsTopicArn);
+      setAttribute(attributes, AWS_SECRET_ARN, awsResp, RequestAccess::getSecretArn);
+      // Get serviceName defined in the AWS Java SDK V1 Request class.
+      String serviceName = request.getServiceName();
+      // Extract response attributes for Bedrock services
+      if (awsResp != null && isBedrockService(serviceName)) {
+        bedrockOnEnd(attributes, awsResp, serviceName);
+      }
+    }
+  }
+
+  private static void bedrockOnStart(
+      AttributesBuilder attributes,
+      Object originalRequest,
+      String requestClassName,
+      String serviceName) {
+    switch (serviceName) {
+      case BEDROCK_SERVICE:
+        setAttribute(attributes, AWS_GUARDRAIL_ID, originalRequest, RequestAccess::getGuardrailId);
+        break;
+      case BEDROCK_AGENT_SERVICE:
+        AwsBedrockResourceType resourceType =
+            AwsBedrockResourceType.getRequestType(requestClassName);
+        if (resourceType != null) {
+          setAttribute(
+              attributes,
+              resourceType.getKeyAttribute(),
+              originalRequest,
+              resourceType.getAttributeValueAccessor());
+        }
+        break;
+      case BEDROCK_AGENT_RUNTIME_SERVICE:
+        setAttribute(attributes, AWS_AGENT_ID, originalRequest, RequestAccess::getAgentId);
+        setAttribute(
+            attributes, AWS_KNOWLEDGE_BASE_ID, originalRequest, RequestAccess::getKnowledgeBaseId);
+        break;
+      case BEDROCK_RUNTIME_SERVICE:
+        if (!Objects.equals(requestClassName, "InvokeModelRequest")) {
+          break;
+        }
+        attributes.put(AWS_BEDROCK_SYSTEM, "aws.bedrock");
+        Function<Object, String> getter = RequestAccess::getModelId;
+        String modelId = getter.apply(originalRequest);
+        attributes.put(AWS_BEDROCK_RUNTIME_MODEL_ID, modelId);
+
+        setAttribute(
+            attributes, GEN_AI_REQUEST_MAX_TOKENS, originalRequest, RequestAccess::getMaxTokens);
+        setAttribute(
+            attributes, GEN_AI_REQUEST_TEMPERATURE, originalRequest, RequestAccess::getTemperature);
+        setAttribute(attributes, GEN_AI_REQUEST_TOP_P, originalRequest, RequestAccess::getTopP);
+        setAttribute(
+            attributes, GEN_AI_USAGE_INPUT_TOKENS, originalRequest, RequestAccess::getInputTokens);
+        break;
+      default:
+        break;
+    }
+  }
+
+  private static void bedrockOnEnd(
+      AttributesBuilder attributes, Object awsResp, String serviceName) {
+    switch (serviceName) {
+      case BEDROCK_SERVICE:
+        setAttribute(attributes, AWS_GUARDRAIL_ID, awsResp, RequestAccess::getGuardrailId);
+        setAttribute(attributes, AWS_GUARDRAIL_ARN, awsResp, RequestAccess::getGuardrailArn);
+        break;
+      case BEDROCK_AGENT_SERVICE:
+        String responseClassName = awsResp.getClass().getSimpleName();
+        AwsBedrockResourceType resourceType =
+            AwsBedrockResourceType.getResponseType(responseClassName);
+        if (resourceType != null) {
+          setAttribute(
+              attributes,
+              resourceType.getKeyAttribute(),
+              awsResp,
+              resourceType.getAttributeValueAccessor());
+        }
+        break;
+      case BEDROCK_AGENT_RUNTIME_SERVICE:
+        setAttribute(attributes, AWS_AGENT_ID, awsResp, RequestAccess::getAgentId);
+        setAttribute(attributes, AWS_KNOWLEDGE_BASE_ID, awsResp, RequestAccess::getKnowledgeBaseId);
+        break;
+      case BEDROCK_RUNTIME_SERVICE:
+        if (!Objects.equals(awsResp.getClass().getSimpleName(), "InvokeModelResult")) {
+          break;
+        }
+
+        setAttribute(attributes, GEN_AI_USAGE_INPUT_TOKENS, awsResp, RequestAccess::getInputTokens);
+        setAttribute(
+            attributes, GEN_AI_USAGE_OUTPUT_TOKENS, awsResp, RequestAccess::getOutputTokens);
+        setAttribute(
+            attributes, GEN_AI_RESPONSE_FINISH_REASONS, awsResp, RequestAccess::getFinishReasons);
+        break;
+      default:
+        break;
+    }
+  }
+
+  private static boolean isBedrockService(String serviceName) {
+    // Check if the serviceName belongs to Bedrock Services defined in AWS Java SDK V1.
+    // For example <a
+    // href="https://github.com/aws/aws-sdk-java/blob/38031248a696468e19a4670c0c4585637d5e7cc6/aws-java-sdk-bedrock/src/main/java/com/amazonaws/services/bedrock/AmazonBedrock.java#L34">AmazonBedrock</a>
+    return serviceName.equals(BEDROCK_SERVICE)
+        || serviceName.equals(BEDROCK_AGENT_SERVICE)
+        || serviceName.equals(BEDROCK_AGENT_RUNTIME_SERVICE)
+        || serviceName.equals(BEDROCK_RUNTIME_SERVICE);
   }
 
-  private static void setRequestAttribute(
+  private static void setAttribute(
       AttributesBuilder attributes,
       AttributeKey<String> key,
       Object request,
@@ -49,12 +213,4 @@ class AwsSdkExperimentalAttributesExtractor
       attributes.put(key, value);
     }
   }
-
-  @Override
-  public void onEnd(
-      AttributesBuilder attributes,
-      Context context,
-      Request<?> request,
-      @Nullable Response<?> response,
-      @Nullable Throwable error) {}
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java
new file mode 100644
index 0000000000..d1acc5768a
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java
@@ -0,0 +1,267 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class BedrockJsonParser {
+
+  // Prevent instantiation
+  private BedrockJsonParser() {
+    throw new UnsupportedOperationException("Utility class");
+  }
+
+  public static LlmJson parse(String jsonString) {
+    JsonParser parser = new JsonParser(jsonString);
+    Map<String, Object> jsonBody = parser.parse();
+    return new LlmJson(jsonBody);
+  }
+
+  static class JsonParser {
+    private final String json;
+    private int position;
+
+    public JsonParser(String json) {
+      this.json = json.trim();
+      this.position = 0;
+    }
+
+    private void skipWhitespace() {
+      while (position < json.length() && Character.isWhitespace(json.charAt(position))) {
+        position++;
+      }
+    }
+
+    private char currentChar() {
+      return json.charAt(position);
+    }
+
+    private static boolean isHexDigit(char c) {
+      return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+    }
+
+    private void expect(char c) {
+      skipWhitespace();
+      if (currentChar() != c) {
+        throw new IllegalArgumentException(
+            "Expected '" + c + "' but found '" + currentChar() + "'");
+      }
+      position++;
+    }
+
+    private String readString() {
+      skipWhitespace();
+      expect('"'); // Ensure the string starts with a quote
+      StringBuilder result = new StringBuilder();
+      while (currentChar() != '"') {
+        // Handle escape sequences
+        if (currentChar() == '\\') {
+          position++; // Move past the backslash
+          if (position >= json.length()) {
+            throw new IllegalArgumentException("Unexpected end of input in string escape sequence");
+          }
+          char escapeChar = currentChar();
+          switch (escapeChar) {
+            case '"':
+            case '\\':
+            case '/':
+              result.append(escapeChar);
+              break;
+            case 'b':
+              result.append('\b');
+              break;
+            case 'f':
+              result.append('\f');
+              break;
+            case 'n':
+              result.append('\n');
+              break;
+            case 'r':
+              result.append('\r');
+              break;
+            case 't':
+              result.append('\t');
+              break;
+            case 'u': // Unicode escape sequence
+              if (position + 4 >= json.length()) {
+                throw new IllegalArgumentException("Invalid unicode escape sequence in string");
+              }
+              char[] hexChars = new char[4];
+              for (int i = 0; i < 4; i++) {
+                position++; // Move to the next character
+                char hexChar = json.charAt(position);
+                if (!isHexDigit(hexChar)) {
+                  throw new IllegalArgumentException(
+                      "Invalid hexadecimal digit in unicode escape sequence");
+                }
+                hexChars[i] = hexChar;
+              }
+              int unicodeValue = Integer.parseInt(new String(hexChars), 16);
+              result.append((char) unicodeValue);
+              break;
+            default:
+              throw new IllegalArgumentException("Invalid escape character: \\" + escapeChar);
+          }
+          position++;
+        } else {
+          result.append(currentChar());
+          position++;
+        }
+      }
+      position++; // Skip closing quote
+      return result.toString();
+    }
+
+    private Object readValue() {
+      skipWhitespace();
+      char c = currentChar();
+
+      if (c == '"') {
+        return readString();
+      } else if (Character.isDigit(c)) {
+        return readScopedNumber();
+      } else if (c == '{') {
+        return readObject(); // JSON Objects
+      } else if (c == '[') {
+        return readArray(); // JSON Arrays
+      } else if (json.startsWith("true", position)) {
+        position += 4;
+        return true;
+      } else if (json.startsWith("false", position)) {
+        position += 5;
+        return false;
+      } else if (json.startsWith("null", position)) {
+        position += 4;
+        return null; // JSON null
+      } else {
+        throw new IllegalArgumentException("Unexpected character: " + c);
+      }
+    }
+
+    private Number readScopedNumber() {
+      int start = position;
+
+      // Consume digits and the optional decimal point
+      while (position < json.length()
+          && (Character.isDigit(json.charAt(position)) || json.charAt(position) == '.')) {
+        position++;
+      }
+
+      String number = json.substring(start, position);
+
+      if (number.contains(".")) {
+        double value = Double.parseDouble(number);
+        if (value < 0.0 || value > 1.0) {
+          throw new IllegalArgumentException(
+              "Value out of bounds for Bedrock Floating Point Attribute: " + number);
+        }
+        return value;
+      } else {
+        return Integer.parseInt(number);
+      }
+    }
+
+    private Map<String, Object> readObject() {
+      Map<String, Object> map = new HashMap<>();
+      expect('{');
+      skipWhitespace();
+      while (currentChar() != '}') {
+        String key = readString();
+        expect(':');
+        Object value = readValue();
+        map.put(key, value);
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++; // Skip closing brace
+      return map;
+    }
+
+    private List<Object> readArray() {
+      List<Object> list = new ArrayList<>();
+      expect('[');
+      skipWhitespace();
+      while (currentChar() != ']') {
+        list.add(readValue());
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++;
+      return list;
+    }
+
+    public Map<String, Object> parse() {
+      return readObject();
+    }
+  }
+
+  // Resolves paths in a JSON structure
+  static class JsonPathResolver {
+
+    // Private constructor to prevent instantiation
+    private JsonPathResolver() {
+      throw new UnsupportedOperationException("Utility class");
+    }
+
+    public static Object resolvePath(LlmJson llmJson, String... paths) {
+      for (String path : paths) {
+        Object value = resolvePath(llmJson.getJsonBody(), path);
+        if (value != null) {
+          return value;
+        }
+      }
+      return null;
+    }
+
+    private static Object resolvePath(Map<String, Object> json, String path) {
+      String[] keys = path.split("/");
+      Object current = json;
+
+      for (String key : keys) {
+        if (key.isEmpty()) {
+          continue;
+        }
+
+        if (current instanceof Map) {
+          current = ((Map<?, ?>) current).get(key);
+        } else if (current instanceof List) {
+          try {
+            int index = Integer.parseInt(key);
+            current = ((List<?>) current).get(index);
+          } catch (NumberFormatException | IndexOutOfBoundsException e) {
+            return null;
+          }
+        } else {
+          return null;
+        }
+
+        if (current == null) {
+          return null;
+        }
+      }
+      return current;
+    }
+  }
+
+  public static class LlmJson {
+    private final Map<String, Object> jsonBody;
+
+    public LlmJson(Map<String, Object> jsonBody) {
+      this.jsonBody = jsonBody;
+    }
+
+    public Map<String, Object> getJsonBody() {
+      return jsonBody;
+    }
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
index c212a69678..3101685194 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
@@ -8,6 +8,12 @@ package io.opentelemetry.instrumentation.awssdk.v1_11;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
+import java.lang.reflect.Method;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Objects;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 final class RequestAccess {
@@ -20,48 +26,392 @@ final class RequestAccess {
         }
       };
 
+  @Nullable
+  private static BedrockJsonParser.LlmJson parseTargetBody(ByteBuffer buffer) {
+    try {
+      byte[] bytes;
+      // Create duplicate to avoid mutating the original buffer position
+      ByteBuffer duplicate = buffer.duplicate();
+      if (buffer.hasArray()) {
+        bytes =
+            Arrays.copyOfRange(
+                duplicate.array(),
+                duplicate.arrayOffset(),
+                duplicate.arrayOffset() + duplicate.remaining());
+      } else {
+        bytes = new byte[buffer.remaining()];
+        buffer.get(bytes);
+      }
+      String jsonString = new String(bytes, StandardCharsets.UTF_8); // Convert to String
+      return BedrockJsonParser.parse(jsonString);
+    } catch (RuntimeException e) {
+      return null;
+    }
+  }
+
+  @Nullable
+  private static BedrockJsonParser.LlmJson getJsonBody(Object target) {
+    if (target == null) {
+      return null;
+    }
+
+    RequestAccess access = REQUEST_ACCESSORS.get(target.getClass());
+    ByteBuffer bodyBuffer = invokeOrNullGeneric(access.getBody, target, ByteBuffer.class);
+    if (bodyBuffer == null) {
+      return null;
+    }
+
+    return parseTargetBody(bodyBuffer);
+  }
+
+  @Nullable
+  private static String findFirstMatchingPath(BedrockJsonParser.LlmJson jsonBody, String... paths) {
+    if (jsonBody == null) {
+      return null;
+    }
+
+    return Stream.of(paths)
+        .map(path -> BedrockJsonParser.JsonPathResolver.resolvePath(jsonBody, path))
+        .filter(Objects::nonNull)
+        .map(Object::toString)
+        .findFirst()
+        .orElse(null);
+  }
+
+  @Nullable
+  private static String approximateTokenCount(
+      BedrockJsonParser.LlmJson jsonBody, String... textPaths) {
+    if (jsonBody == null) {
+      return null;
+    }
+
+    return Stream.of(textPaths)
+        .map(path -> BedrockJsonParser.JsonPathResolver.resolvePath(jsonBody, path))
+        .filter(value -> value instanceof String)
+        .map(value -> Integer.toString((int) Math.ceil(((String) value).length() / 6.0)))
+        .findFirst()
+        .orElse(null);
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/max_new_tokens"
+  // Amazon Titan -> "/textGenerationConfig/maxTokenCount"
+  // Anthropic Claude -> "/max_tokens"
+  // Cohere Command -> "/max_tokens"
+  // Cohere Command R -> "/max_tokens"
+  // AI21 Jamba -> "/max_tokens"
+  // Meta Llama -> "/max_gen_len"
+  // Mistral AI -> "/max_tokens"
+  @Nullable
+  static String getMaxTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody,
+        "/max_tokens",
+        "/max_gen_len",
+        "/textGenerationConfig/maxTokenCount",
+        "/inferenceConfig/max_new_tokens");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/temperature"
+  // Amazon Titan -> "/textGenerationConfig/temperature"
+  // Anthropic Claude -> "/temperature"
+  // Cohere Command -> "/temperature"
+  // Cohere Command R -> "/temperature"
+  // AI21 Jamba -> "/temperature"
+  // Meta Llama -> "/temperature"
+  // Mistral AI -> "/temperature"
+  @Nullable
+  static String getTemperature(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody,
+        "/temperature",
+        "/textGenerationConfig/temperature",
+        "inferenceConfig/temperature");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/top_p"
+  // Amazon Titan -> "/textGenerationConfig/topP"
+  // Anthropic Claude -> "/top_p"
+  // Cohere Command -> "/p"
+  // Cohere Command R -> "/p"
+  // AI21 Jamba -> "/top_p"
+  // Meta Llama -> "/top_p"
+  // Mistral AI -> "/top_p"
+  @Nullable
+  static String getTopP(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody, "/top_p", "/p", "/textGenerationConfig/topP", "/inferenceConfig/top_p");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/inputTokens"
+  // Amazon Titan -> "/inputTextTokenCount"
+  // Anthropic Claude -> "/usage/input_tokens"
+  // Cohere Command -> "/prompt"
+  // Cohere Command R -> "/message"
+  // AI21 Jamba -> "/usage/prompt_tokens"
+  // Meta Llama -> "/prompt_token_count"
+  // Mistral AI -> "/prompt"
+  @Nullable
+  static String getInputTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    if (jsonBody == null) {
+      return null;
+    }
+
+    // Try direct token counts first
+    String directCount =
+        findFirstMatchingPath(
+            jsonBody,
+            "/inputTextTokenCount",
+            "/prompt_token_count",
+            "/usage/input_tokens",
+            "/usage/prompt_tokens",
+            "/usage/inputTokens");
+
+    if (directCount != null && !directCount.equals("null")) {
+      return directCount;
+    }
+
+    // Fall back to token approximation
+    return approximateTokenCount(jsonBody, "/prompt", "/message");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/outputTokens"
+  // Amazon Titan -> "/results/0/tokenCount"
+  // Anthropic Claude -> "/usage/output_tokens"
+  // Cohere Command -> "/generations/0/text"
+  // Cohere Command R -> "/text"
+  // AI21 Jamba -> "/usage/completion_tokens"
+  // Meta Llama -> "/generation_token_count"
+  // Mistral AI -> "/outputs/0/text"
+  @Nullable
+  static String getOutputTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    if (jsonBody == null) {
+      return null;
+    }
+
+    // Try direct token counts first
+    String directCount =
+        findFirstMatchingPath(
+            jsonBody,
+            "/generation_token_count",
+            "/results/0/tokenCount",
+            "/usage/output_tokens",
+            "/usage/completion_tokens",
+            "/usage/outputTokens");
+
+    if (directCount != null && !directCount.equals("null")) {
+      return directCount;
+    }
+
+    // Fall back to token approximation
+    return approximateTokenCount(jsonBody, "/text", "/outputs/0/text");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/stopReason"
+  // Amazon Titan -> "/results/0/completionReason"
+  // Anthropic Claude -> "/stop_reason"
+  // Cohere Command -> "/generations/0/finish_reason"
+  // Cohere Command R -> "/finish_reason"
+  // AI21 Jamba -> "/choices/0/finish_reason"
+  // Meta Llama -> "/stop_reason"
+  // Mistral AI -> "/outputs/0/stop_reason"
+  @Nullable
+  static String getFinishReasons(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    String finishReason =
+        findFirstMatchingPath(
+            jsonBody,
+            "/stopReason",
+            "/finish_reason",
+            "/stop_reason",
+            "/results/0/completionReason",
+            "/generations/0/finish_reason",
+            "/choices/0/finish_reason",
+            "/outputs/0/stop_reason");
+
+    return finishReason != null ? "[" + finishReason + "]" : null;
+  }
+
+  @Nullable
+  static String getLambdaName(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getLambdaName, request);
+  }
+
+  @Nullable
+  static String getLambdaResourceId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getLambdaResourceId, request);
+  }
+
+  @Nullable
+  static String getSecretArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getSecretArn, request);
+  }
+
+  @Nullable
+  static String getSnsTopicArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getSnsTopicArn, request);
+  }
+
+  @Nullable
+  static String getStepFunctionsActivityArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getStepFunctionsActivityArn, request);
+  }
+
+  @Nullable
+  static String getStateMachineArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getStateMachineArn, request);
+  }
+
   @Nullable
   static String getBucketName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getBucketName, request);
   }
 
   @Nullable
   static String getQueueUrl(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getQueueUrl, request);
   }
 
   @Nullable
   static String getQueueName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getQueueName, request);
   }
 
   @Nullable
   static String getStreamName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getStreamName, request);
   }
 
   @Nullable
   static String getTableName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getTableName, request);
   }
 
   @Nullable
   static String getTopicArn(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getTopicArn, request);
   }
 
   @Nullable
   static String getTargetArn(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getTargetArn, request);
   }
 
+  @Nullable
+  static String getAgentId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getAgentId, request);
+  }
+
+  @Nullable
+  static String getKnowledgeBaseId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getKnowledgeBaseId, request);
+  }
+
+  @Nullable
+  static String getDataSourceId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getDataSourceId, request);
+  }
+
+  @Nullable
+  static String getGuardrailId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getGuardrailId, request);
+  }
+
+  @Nullable
+  static String getGuardrailArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    return findNestedAccessorOrNull(request, "getGuardrailArn");
+  }
+
+  @Nullable
+  static String getModelId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getModelId, request);
+  }
+
   @Nullable
   private static String invokeOrNull(@Nullable MethodHandle method, Object obj) {
     if (method == null) {
@@ -74,6 +424,19 @@ final class RequestAccess {
     }
   }
 
+  @Nullable
+  private static <T> T invokeOrNullGeneric(
+      @Nullable MethodHandle method, Object obj, Class<T> returnType) {
+    if (method == null) {
+      return null;
+    }
+    try {
+      return returnType.cast(method.invoke(obj));
+    } catch (Throwable e) {
+      return null;
+    }
+  }
+
   @Nullable private final MethodHandle getBucketName;
   @Nullable private final MethodHandle getQueueUrl;
   @Nullable private final MethodHandle getQueueName;
@@ -81,24 +444,66 @@ final class RequestAccess {
   @Nullable private final MethodHandle getTableName;
   @Nullable private final MethodHandle getTopicArn;
   @Nullable private final MethodHandle getTargetArn;
+  @Nullable private final MethodHandle getAgentId;
+  @Nullable private final MethodHandle getKnowledgeBaseId;
+  @Nullable private final MethodHandle getDataSourceId;
+  @Nullable private final MethodHandle getGuardrailId;
+  @Nullable private final MethodHandle getModelId;
+  @Nullable private final MethodHandle getBody;
+  @Nullable private final MethodHandle getStateMachineArn;
+  @Nullable private final MethodHandle getStepFunctionsActivityArn;
+  @Nullable private final MethodHandle getSnsTopicArn;
+  @Nullable private final MethodHandle getSecretArn;
+  @Nullable private final MethodHandle getLambdaName;
+  @Nullable private final MethodHandle getLambdaResourceId;
 
   private RequestAccess(Class<?> clz) {
-    getBucketName = findAccessorOrNull(clz, "getBucketName");
-    getQueueUrl = findAccessorOrNull(clz, "getQueueUrl");
-    getQueueName = findAccessorOrNull(clz, "getQueueName");
-    getStreamName = findAccessorOrNull(clz, "getStreamName");
-    getTableName = findAccessorOrNull(clz, "getTableName");
-    getTopicArn = findAccessorOrNull(clz, "getTopicArn");
-    getTargetArn = findAccessorOrNull(clz, "getTargetArn");
+    getBucketName = findAccessorOrNull(clz, "getBucketName", String.class);
+    getQueueUrl = findAccessorOrNull(clz, "getQueueUrl", String.class);
+    getQueueName = findAccessorOrNull(clz, "getQueueName", String.class);
+    getStreamName = findAccessorOrNull(clz, "getStreamName", String.class);
+    getTableName = findAccessorOrNull(clz, "getTableName", String.class);
+    getTopicArn = findAccessorOrNull(clz, "getTopicArn", String.class);
+    getTargetArn = findAccessorOrNull(clz, "getTargetArn", String.class);
+    getAgentId = findAccessorOrNull(clz, "getAgentId", String.class);
+    getKnowledgeBaseId = findAccessorOrNull(clz, "getKnowledgeBaseId", String.class);
+    getDataSourceId = findAccessorOrNull(clz, "getDataSourceId", String.class);
+    getGuardrailId = findAccessorOrNull(clz, "getGuardrailId", String.class);
+    getModelId = findAccessorOrNull(clz, "getModelId", String.class);
+    getBody = findAccessorOrNull(clz, "getBody", ByteBuffer.class);
+    getStateMachineArn = findAccessorOrNull(clz, "getStateMachineArn", String.class);
+    getStepFunctionsActivityArn = findAccessorOrNull(clz, "getActivityArn", String.class);
+    getSnsTopicArn = findAccessorOrNull(clz, "getTopicArn", String.class);
+    getSecretArn = findAccessorOrNull(clz, "getARN", String.class);
+    getLambdaName = findAccessorOrNull(clz, "getFunctionName", String.class);
+    getLambdaResourceId = findAccessorOrNull(clz, "getUUID", String.class);
   }
 
   @Nullable
-  private static MethodHandle findAccessorOrNull(Class<?> clz, String methodName) {
+  private static MethodHandle findAccessorOrNull(
+      Class<?> clz, String methodName, Class<?> returnType) {
     try {
       return MethodHandles.publicLookup()
-          .findVirtual(clz, methodName, MethodType.methodType(String.class));
+          .findVirtual(clz, methodName, MethodType.methodType(returnType));
     } catch (Throwable t) {
       return null;
     }
   }
+
+  @Nullable
+  private static String findNestedAccessorOrNull(Object obj, String... methodNames) {
+    Object current = obj;
+    for (String methodName : methodNames) {
+      if (current == null) {
+        return null;
+      }
+      try {
+        Method method = current.getClass().getMethod(methodName);
+        current = method.invoke(current);
+      } catch (Exception e) {
+        return null;
+      }
+    }
+    return (current instanceof String) ? (String) current : null;
+  }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy
new file mode 100644
index 0000000000..03563b1d5b
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy
@@ -0,0 +1,107 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11
+
+import spock.lang.Specification
+
+class BedrockJsonParserTest extends Specification {
+  def "should parse simple JSON object"() {
+    given:
+    String json = '{"key":"value"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody() == [key: "value"]
+  }
+
+  def "should parse nested JSON object"() {
+    given:
+    String json = '{"parent":{"child":"value"}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def parent = parsedJson.getJsonBody().get("parent")
+    parent instanceof Map
+    parent["child"] == "value"
+  }
+
+  def "should parse JSON array"() {
+    given:
+    String json = '{"array":[1, "two", 1.0]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def array = parsedJson.getJsonBody().get("array")
+    array instanceof List
+    array == [1, "two", 1.0]
+  }
+
+  def "should parse escape sequences"() {
+    given:
+    String json = '{"escaped":"Line1\\nLine2\\tTabbed\\\"Quoted\\\"\\bBackspace\\fFormfeed\\rCarriageReturn\\\\Backslash\\/Slash\\u0041"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody().get("escaped") ==
+        "Line1\nLine2\tTabbed\"Quoted\"\bBackspace\fFormfeed\rCarriageReturn\\Backslash/SlashA"
+  }
+
+  def "should throw exception for malformed JSON"() {
+    given:
+    String malformedJson = '{"key":value}'
+
+    when:
+    BedrockJsonParser.parse(malformedJson)
+
+    then:
+    def ex = thrown(IllegalArgumentException)
+    ex.message.contains("Unexpected character")
+  }
+
+  def "should resolve path in JSON object"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/parent/child/key")
+
+    then:
+    resolvedValue == "value"
+  }
+
+  def "should resolve path in JSON array"() {
+    given:
+    String json = '{"array":[{"key":"value1"}, {"key":"value2"}]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/array/1/key")
+
+    then:
+    resolvedValue == "value2"
+  }
+
+  def "should return null for invalid path resolution"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/invalid/path")
+
+    then:
+    resolvedValue == null
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
index 545f5dffce..227a205ebd 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
@@ -14,6 +14,14 @@ dependencies {
   compileOnly("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   compileOnly("com.amazonaws:aws-java-sdk-sns:1.11.106")
   compileOnly("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  compileOnly("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  compileOnly("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  compileOnly("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+
+  compileOnly("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // needed for SQS - using emq directly as localstack references emq v0.15.7 ie WITHOUT AWS trace header propagation
   implementation("org.elasticmq:elasticmq-rest-sqs_2.13")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockAgentClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockAgentClientTest.java
new file mode 100644
index 0000000000..a5e5a63b09
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockAgentClientTest.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Collections.singletonList;
+
+import com.amazonaws.services.bedrockagent.AWSBedrockAgent;
+import com.amazonaws.services.bedrockagent.AWSBedrockAgentClientBuilder;
+import com.amazonaws.services.bedrockagent.model.GetAgentRequest;
+import com.amazonaws.services.bedrockagent.model.GetDataSourceRequest;
+import com.amazonaws.services.bedrockagent.model.GetKnowledgeBaseRequest;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import org.junit.jupiter.api.Test;
+
+public abstract class AbstractBedrockAgentClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AWSBedrockAgentClientBuilder configureClient(AWSBedrockAgentClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return true;
+  }
+
+  @Test
+  public void sendGetAgentRequest() throws Exception {
+    AWSBedrockAgent client = createClient();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.JSON_UTF_8, "{}"));
+
+    Object response = client.getAgent(new GetAgentRequest().withAgentId("agentId"));
+
+    assertRequestWithMockedResponse(
+        response,
+        client,
+        "AWSBedrockAgent",
+        "GetAgent",
+        "GET",
+        singletonList(equalTo(stringKey("aws.bedrock.agent.id"), "agentId")));
+  }
+
+  @Test
+  public void sendGetKnowledgeBaseRequest() throws Exception {
+    AWSBedrockAgent client = createClient();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.JSON_UTF_8, "{}"));
+
+    Object response =
+        client.getKnowledgeBase(
+            new GetKnowledgeBaseRequest().withKnowledgeBaseId("knowledgeBaseId"));
+
+    assertRequestWithMockedResponse(
+        response,
+        client,
+        "AWSBedrockAgent",
+        "GetKnowledgeBase",
+        "GET",
+        singletonList(equalTo(stringKey("aws.bedrock.knowledge_base.id"), "knowledgeBaseId")));
+  }
+
+  @Test
+  public void sendGetDataSourceRequest() throws Exception {
+    AWSBedrockAgent client = createClient();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.JSON_UTF_8, "{}"));
+
+    Object response =
+        client.getDataSource(
+            new GetDataSourceRequest()
+                .withDataSourceId("datasourceId")
+                .withKnowledgeBaseId("knowledgeBaseId"));
+
+    assertRequestWithMockedResponse(
+        response,
+        client,
+        "AWSBedrockAgent",
+        "GetDataSource",
+        "GET",
+        singletonList(equalTo(stringKey("aws.bedrock.data_source.id"), "datasourceId")));
+  }
+
+  private AWSBedrockAgent createClient() {
+    AWSBedrockAgentClientBuilder clientBuilder = AWSBedrockAgentClientBuilder.standard();
+    return configureClient(clientBuilder)
+        .withEndpointConfiguration(endpoint)
+        .withCredentials(credentialsProvider)
+        .build();
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockClientTest.java
new file mode 100644
index 0000000000..a97b893055
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockClientTest.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Collections.singletonList;
+
+import com.amazonaws.services.bedrock.AmazonBedrock;
+import com.amazonaws.services.bedrock.AmazonBedrockClientBuilder;
+import com.amazonaws.services.bedrock.model.GetGuardrailRequest;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import org.junit.jupiter.api.Test;
+
+public abstract class AbstractBedrockClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AmazonBedrockClientBuilder configureClient(AmazonBedrockClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return true;
+  }
+
+  @Test
+  public void sendRequestWithMockedResponse() throws Exception {
+    AmazonBedrockClientBuilder clientBuilder = AmazonBedrockClientBuilder.standard();
+    AmazonBedrock client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    String body =
+        "{"
+            + "  \"blockedInputMessaging\": \"string\","
+            + "  \"blockedOutputsMessaging\": \"string\","
+            + "  \"contentPolicy\": {},"
+            + "  \"createdAt\": \"2024-06-12T18:31:45Z\","
+            + "  \"description\": \"string\","
+            + "  \"guardrailArn\": \"guardrailArn\","
+            + "  \"guardrailId\": \"guardrailId\","
+            + "  \"kmsKeyArn\": \"string\","
+            + "  \"name\": \"string\","
+            + "  \"sensitiveInformationPolicy\": {},"
+            + "  \"status\": \"READY\","
+            + "  \"topicPolicy\": {"
+            + "    \"topics\": ["
+            + "      {"
+            + "        \"definition\": \"string\","
+            + "        \"examples\": [ \"string\" ],"
+            + "        \"name\": \"string\","
+            + "        \"type\": \"string\""
+            + "      }"
+            + "    ]"
+            + "  },"
+            + "  \"updatedAt\": \"2024-06-12T18:31:48Z\","
+            + "  \"version\": \"DRAFT\","
+            + "  \"wordPolicy\": {}"
+            + "}";
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.JSON_UTF_8, body));
+
+    Object response =
+        client.getGuardrail(new GetGuardrailRequest().withGuardrailIdentifier("guardrailId"));
+
+    assertRequestWithMockedResponse(
+        response,
+        client,
+        "Bedrock",
+        "GetGuardrail",
+        "GET",
+        singletonList(equalTo(stringKey("aws.bedrock.guardrail.id"), "guardrailId")));
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockRuntimeClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockRuntimeClientTest.java
new file mode 100644
index 0000000000..98a5873614
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractBedrockRuntimeClientTest.java
@@ -0,0 +1,135 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Arrays.asList;
+
+import com.amazonaws.services.bedrockruntime.AmazonBedrockRuntime;
+import com.amazonaws.services.bedrockruntime.AmazonBedrockRuntimeClientBuilder;
+import com.amazonaws.services.bedrockruntime.model.InvokeModelRequest;
+import io.opentelemetry.sdk.testing.assertj.AttributeAssertion;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.stream.Stream;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+public abstract class AbstractBedrockRuntimeClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AmazonBedrockRuntimeClientBuilder configureClient(
+      AmazonBedrockRuntimeClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return true;
+  }
+
+  @ParameterizedTest
+  @MethodSource("testData")
+  public void sendRequestWithMockedResponse(
+      String modelId,
+      String requestBody,
+      String expectedResponse,
+      List<AttributeAssertion> expectedAttributes)
+      throws Exception {
+    AmazonBedrockRuntimeClientBuilder clientBuilder = AmazonBedrockRuntimeClientBuilder.standard();
+    AmazonBedrockRuntime client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.JSON_UTF_8, expectedResponse));
+
+    client.invokeModel(
+        new InvokeModelRequest()
+            .withModelId(modelId)
+            .withBody(StandardCharsets.UTF_8.encode(requestBody)));
+
+    assertRequestWithMockedResponse(
+        expectedResponse, client, "BedrockRuntime", "InvokeModel", "POST", expectedAttributes);
+  }
+
+  private static Stream<Object[]> testData() {
+    return Stream.of(
+        new Object[] {
+          "ai21.jamba-1-5-mini-v1:0",
+          "{\"messages\":[{\"role\":\"user\",\"message\":\"Which LLM are you?\"}],\"max_tokens\":1000,\"top_p\":0.8,\"temperature\":0.7}",
+          "{\"choices\":[{\"finish_reason\":\"stop\"}],\"usage\":{\"prompt_tokens\":5,\"completion_tokens\":42}}",
+          asList(
+              equalTo(stringKey("gen_ai.request.model"), "ai21.jamba-1-5-mini-v1:0"),
+              equalTo(stringKey("gen_ai.system"), "aws.bedrock"),
+              equalTo(stringKey("gen_ai.request.max_tokens"), "1000"),
+              equalTo(stringKey("gen_ai.request.temperature"), "0.7"),
+              equalTo(stringKey("gen_ai.request.top_p"), "0.8"),
+              equalTo(stringKey("gen_ai.response.finish_reasons"), "[stop]"),
+              equalTo(stringKey("gen_ai.usage.input_tokens"), "5"),
+              equalTo(stringKey("gen_ai.usage.output_tokens"), "42"))
+        },
+        new Object[] {
+          "amazon.titan-text-premier-v1:0",
+          "{\"inputText\":\"Hello, world!\",\"textGenerationConfig\":{\"temperature\":0.7,\"topP\":0.9,\"maxTokenCount\":100,\"stopSequences\":[\"END\"]}}",
+          "{\"inputTextTokenCount\":5,\"results\":[{\"tokenCount\":42,\"outputText\":\"Hi! I'm Titan, an AI assistant.\",\"completionReason\":\"stop\"}]}",
+          asList(
+              equalTo(stringKey("gen_ai.request.model"), "amazon.titan-text-premier-v1:0"),
+              equalTo(stringKey("gen_ai.system"), "aws.bedrock"),
+              equalTo(stringKey("gen_ai.request.max_tokens"), "100"),
+              equalTo(stringKey("gen_ai.request.temperature"), "0.7"),
+              equalTo(stringKey("gen_ai.request.top_p"), "0.9"),
+              equalTo(stringKey("gen_ai.response.finish_reasons"), "[stop]"),
+              equalTo(stringKey("gen_ai.usage.input_tokens"), "5"),
+              equalTo(stringKey("gen_ai.usage.output_tokens"), "42"))
+        },
+        new Object[] {
+          "anthropic.claude-3-5-sonnet-20241022-v2:0",
+          "{\"anthropic_version\":\"bedrock-2023-05-31\",\"messages\":[{\"role\":\"user\",\"content\":\"Hello, world\"}],\"max_tokens\":100,\"temperature\":0.7,\"top_p\":0.9}",
+          "{\"stop_reason\":\"end_turn\",\"usage\":{\"input_tokens\":2095,\"output_tokens\":503}}",
+          asList(
+              equalTo(
+                  stringKey("gen_ai.request.model"), "anthropic.claude-3-5-sonnet-20241022-v2:0"),
+              equalTo(stringKey("gen_ai.system"), "aws.bedrock"),
+              equalTo(stringKey("gen_ai.request.max_tokens"), "100"),
+              equalTo(stringKey("gen_ai.request.temperature"), "0.7"),
+              equalTo(stringKey("gen_ai.request.top_p"), "0.9"),
+              equalTo(stringKey("gen_ai.response.finish_reasons"), "[end_turn]"),
+              equalTo(stringKey("gen_ai.usage.input_tokens"), "2095"),
+              equalTo(stringKey("gen_ai.usage.output_tokens"), "503"))
+        },
+        new Object[] {
+          "meta.llama3-70b-instruct-v1:0",
+          "{\"prompt\":\"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\\\\nDescribe the purpose of a 'hello world' program in one line. <|eot_id|>\\\\n<|start_header_id|>assistant<|end_header_id|>\\\\n\",\"max_gen_len\":128,\"temperature\":0.1,\"top_p\":0.9}",
+          "{\"prompt_token_count\":2095,\"generation_token_count\":503,\"stop_reason\":\"stop\"}",
+          asList(
+              equalTo(stringKey("gen_ai.request.model"), "meta.llama3-70b-instruct-v1:0"),
+              equalTo(stringKey("gen_ai.system"), "aws.bedrock"),
+              equalTo(stringKey("gen_ai.request.max_tokens"), "128"),
+              equalTo(stringKey("gen_ai.request.temperature"), "0.1"),
+              equalTo(stringKey("gen_ai.request.top_p"), "0.9"),
+              equalTo(stringKey("gen_ai.response.finish_reasons"), "[stop]"),
+              equalTo(stringKey("gen_ai.usage.input_tokens"), "2095"),
+              equalTo(stringKey("gen_ai.usage.output_tokens"), "503"))
+        },
+        new Object[] {
+          "cohere.command-r-v1:0",
+          "{\"message\":\"Convince me to write a LISP interpreter in one line.\",\"temperature\":0.8,\"max_tokens\":4096,\"p\":0.45}",
+          "{\"text\":\"test-output\",\"finish_reason\":\"COMPLETE\"}",
+          asList(
+              equalTo(stringKey("gen_ai.request.model"), "cohere.command-r-v1:0"),
+              equalTo(stringKey("gen_ai.system"), "aws.bedrock"),
+              equalTo(stringKey("gen_ai.request.max_tokens"), "4096"),
+              equalTo(stringKey("gen_ai.request.temperature"), "0.8"),
+              equalTo(stringKey("gen_ai.request.top_p"), "0.45"),
+              equalTo(stringKey("gen_ai.response.finish_reasons"), "[COMPLETE]"),
+              equalTo(stringKey("gen_ai.usage.input_tokens"), "9"),
+              equalTo(stringKey("gen_ai.usage.output_tokens"), "2"))
+        });
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractLambdaClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractLambdaClientTest.java
new file mode 100644
index 0000000000..9f5a245ee7
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractLambdaClientTest.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Collections.singletonList;
+
+import com.amazonaws.services.lambda.AWSLambda;
+import com.amazonaws.services.lambda.AWSLambdaClientBuilder;
+import com.amazonaws.services.lambda.model.GetEventSourceMappingRequest;
+import com.amazonaws.services.lambda.model.GetFunctionRequest;
+import io.opentelemetry.sdk.testing.assertj.AttributeAssertion;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import java.util.List;
+import java.util.function.Function;
+import java.util.stream.Stream;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+public abstract class AbstractLambdaClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AWSLambdaClientBuilder configureClient(AWSLambdaClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return false;
+  }
+
+  @ParameterizedTest
+  @MethodSource("provideArguments")
+  public void testSendRequestWithMockedResponse(
+      String operation,
+      List<AttributeAssertion> additionalAttributes,
+      Function<AWSLambda, Object> call)
+      throws Exception {
+
+    AWSLambdaClientBuilder clientBuilder = AWSLambdaClientBuilder.standard();
+
+    AWSLambda client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, ""));
+
+    Object response = call.apply(client);
+    assertRequestWithMockedResponse(
+        response, client, "AWSLambda", operation, "GET", additionalAttributes);
+  }
+
+  private static Stream<Arguments> provideArguments() {
+    return Stream.of(
+        Arguments.of(
+            "GetEventSourceMapping",
+            singletonList(equalTo(stringKey("aws.lambda.resource_mapping.id"), "uuid")),
+            (Function<AWSLambda, Object>)
+                c -> c.getEventSourceMapping(new GetEventSourceMappingRequest().withUUID("uuid"))),
+        Arguments.of(
+            "GetFunction",
+            singletonList(equalTo(stringKey("aws.lambda.function.name"), "functionName")),
+            (Function<AWSLambda, Object>)
+                c -> c.getFunction(new GetFunctionRequest().withFunctionName("functionName"))));
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSecretsManagerClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSecretsManagerClientTest.java
new file mode 100644
index 0000000000..03de6fce3f
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSecretsManagerClientTest.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Collections.singletonList;
+
+import com.amazonaws.services.secretsmanager.AWSSecretsManager;
+import com.amazonaws.services.secretsmanager.AWSSecretsManagerClientBuilder;
+import com.amazonaws.services.secretsmanager.model.CreateSecretRequest;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import org.junit.jupiter.api.Test;
+
+public abstract class AbstractSecretsManagerClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AWSSecretsManagerClientBuilder configureClient(
+      AWSSecretsManagerClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return true;
+  }
+
+  @Test
+  public void sendRequestWithMockedResponse() throws Exception {
+    AWSSecretsManagerClientBuilder clientBuilder = AWSSecretsManagerClientBuilder.standard();
+    AWSSecretsManager client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    String body =
+        "{"
+            + "\"ARN\": \"arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3\","
+            + "\"Name\": \"MyTestDatabaseSecret\","
+            + "\"VersionId\": \"EXAMPLE1-90ab-cdef-fedc-ba987SECRET1\""
+            + "}";
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, body));
+
+    Object response =
+        client.createSecret(
+            new CreateSecretRequest().withName("secretName").withSecretString("secretValue"));
+
+    assertRequestWithMockedResponse(
+        response,
+        client,
+        "AWSSecretsManager",
+        "CreateSecret",
+        "POST",
+        singletonList(
+            equalTo(
+                stringKey("aws.secretsmanager.secret.arn"),
+                "arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3")));
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSnsClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSnsClientTest.java
index 3f272ba477..bea20f3d86 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSnsClientTest.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractSnsClientTest.java
@@ -5,8 +5,10 @@
 
 package io.opentelemetry.instrumentation.awssdk.v1_11;
 
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
 import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
 import static io.opentelemetry.semconv.incubating.MessagingIncubatingAttributes.MESSAGING_DESTINATION_NAME;
+import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 
 import com.amazonaws.services.sns.AmazonSNS;
@@ -17,11 +19,7 @@ import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
 import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
 import io.opentelemetry.testing.internal.armeria.common.MediaType;
 import java.util.List;
-import java.util.function.Function;
-import java.util.stream.Stream;
-import org.junit.jupiter.params.ParameterizedTest;
-import org.junit.jupiter.params.provider.Arguments;
-import org.junit.jupiter.params.provider.MethodSource;
+import org.junit.jupiter.api.Test;
 
 public abstract class AbstractSnsClientTest extends AbstractBaseAwsClientTest {
 
@@ -32,9 +30,8 @@ public abstract class AbstractSnsClientTest extends AbstractBaseAwsClientTest {
     return true;
   }
 
-  @ParameterizedTest
-  @MethodSource("provideArguments")
-  public void testSendRequestWithMockedResponse(Function<AmazonSNS, Object> call) throws Exception {
+  @Test
+  public void testSendRequestWithwithTopicArnMockedResponse() throws Exception {
     AmazonSNSClientBuilder clientBuilder = AmazonSNSClientBuilder.standard();
     AmazonSNS client =
         configureClient(clientBuilder)
@@ -55,24 +52,44 @@ public abstract class AbstractSnsClientTest extends AbstractBaseAwsClientTest {
     server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, body));
 
     List<AttributeAssertion> additionalAttributes =
-        singletonList(equalTo(MESSAGING_DESTINATION_NAME, "somearn"));
+        asList(
+            equalTo(stringKey(MESSAGING_DESTINATION_NAME.getKey()), "somearn"),
+            equalTo(stringKey("aws.sns.topic.arn"), "somearn"));
+
+    Object response =
+        client.publish(new PublishRequest().withMessage("somemessage").withTopicArn("somearn"));
 
-    Object response = call.apply(client);
     assertRequestWithMockedResponse(
         response, client, "SNS", "Publish", "POST", additionalAttributes);
   }
 
-  private static Stream<Arguments> provideArguments() {
-    return Stream.of(
-        Arguments.of(
-            (Function<AmazonSNS, Object>)
-                c ->
-                    c.publish(
-                        new PublishRequest().withMessage("somemessage").withTopicArn("somearn"))),
-        Arguments.of(
-            (Function<AmazonSNS, Object>)
-                c ->
-                    c.publish(
-                        new PublishRequest().withMessage("somemessage").withTargetArn("somearn"))));
+  @Test
+  public void testSendRequestWithwithTargetArnMockedResponse() throws Exception {
+    AmazonSNSClientBuilder clientBuilder = AmazonSNSClientBuilder.standard();
+    AmazonSNS client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    String body =
+        "<PublishResponse xmlns=\"https://sns.amazonaws.com/doc/2010-03-31/\">"
+            + "    <PublishResult>"
+            + "        <MessageId>567910cd-659e-55d4-8ccb-5aaf14679dc0</MessageId>"
+            + "    </PublishResult>"
+            + "    <ResponseMetadata>"
+            + "        <RequestId>d74b8436-ae13-5ab4-a9ff-ce54dfea72a0</RequestId>"
+            + "    </ResponseMetadata>"
+            + "</PublishResponse>";
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, body));
+
+    List<AttributeAssertion> additionalAttributes =
+        singletonList(equalTo(stringKey(MESSAGING_DESTINATION_NAME.getKey()), "somearn"));
+
+    Object response =
+        client.publish(new PublishRequest().withMessage("somemessage").withTargetArn("somearn"));
+    assertRequestWithMockedResponse(
+        response, client, "SNS", "Publish", "POST", additionalAttributes);
   }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractStepFunctionsClientTest.java b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractStepFunctionsClientTest.java
new file mode 100644
index 0000000000..fc58ec3c9b
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractStepFunctionsClientTest.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+import static io.opentelemetry.sdk.testing.assertj.OpenTelemetryAssertions.equalTo;
+import static java.util.Collections.singletonList;
+
+import com.amazonaws.services.stepfunctions.AWSStepFunctions;
+import com.amazonaws.services.stepfunctions.AWSStepFunctionsClientBuilder;
+import com.amazonaws.services.stepfunctions.model.DescribeActivityRequest;
+import com.amazonaws.services.stepfunctions.model.DescribeStateMachineRequest;
+import io.opentelemetry.sdk.testing.assertj.AttributeAssertion;
+import io.opentelemetry.testing.internal.armeria.common.HttpResponse;
+import io.opentelemetry.testing.internal.armeria.common.HttpStatus;
+import io.opentelemetry.testing.internal.armeria.common.MediaType;
+import java.util.List;
+import java.util.function.Function;
+import java.util.stream.Stream;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+public abstract class AbstractStepFunctionsClientTest extends AbstractBaseAwsClientTest {
+
+  public abstract AWSStepFunctionsClientBuilder configureClient(
+      AWSStepFunctionsClientBuilder client);
+
+  @Override
+  protected boolean hasRequestId() {
+    return false;
+  }
+
+  @ParameterizedTest
+  @MethodSource("provideArguments")
+  public void testSendRequestWithMockedResponse(
+      String operation,
+      List<AttributeAssertion> additionalAttributes,
+      Function<AWSStepFunctions, Object> call)
+      throws Exception {
+
+    AWSStepFunctionsClientBuilder clientBuilder = AWSStepFunctionsClientBuilder.standard();
+
+    AWSStepFunctions client =
+        configureClient(clientBuilder)
+            .withEndpointConfiguration(endpoint)
+            .withCredentials(credentialsProvider)
+            .build();
+
+    server.enqueue(HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, ""));
+
+    Object response = call.apply(client);
+    assertRequestWithMockedResponse(
+        response, client, "AWSStepFunctions", operation, "POST", additionalAttributes);
+  }
+
+  private static Stream<Arguments> provideArguments() {
+    return Stream.of(
+        Arguments.of(
+            "DescribeStateMachine",
+            singletonList(
+                equalTo(stringKey("aws.stepfunctions.state_machine.arn"), "stateMachineArn")),
+            (Function<AWSStepFunctions, Object>)
+                c ->
+                    c.describeStateMachine(
+                        new DescribeStateMachineRequest().withStateMachineArn("stateMachineArn"))),
+        Arguments.of(
+            "DescribeActivity",
+            singletonList(equalTo(stringKey("aws.stepfunctions.activity.arn"), "activityArn")),
+            (Function<AWSStepFunctions, Object>)
+                c ->
+                    c.describeActivity(
+                        new DescribeActivityRequest().withActivityArn("activityArn"))));
+  }
+}

diff --git a/version.gradle.kts b/version.gradle.kts
index a1cae43b4b..c1520e9947 100644
--- a/version.gradle.kts
+++ b/version.gradle.kts
@@ -1,5 +1,5 @@
-val stableVersion = "2.11.0"
-val alphaVersion = "2.11.0-alpha"
+val stableVersion = "2.11.0-adot1"
+val alphaVersion = "2.11.0-adot1-alpha"
 
 allprojects {
   if (findProperty("otel.stable") != "true") {
