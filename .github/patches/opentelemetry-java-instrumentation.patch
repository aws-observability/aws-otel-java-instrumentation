diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
index f357a19f88..fa90530579 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/build.gradle.kts
@@ -47,6 +47,14 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-kinesis:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   testImplementation(project(":instrumentation:aws-sdk:aws-sdk-1.11:testing"))
 
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/S3TracingTest.groovy b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/S3TracingTest.groovy
index 987a50ed95..889c856a7c 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/S3TracingTest.groovy
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/S3TracingTest.groovy
@@ -444,6 +444,7 @@ class S3TracingTest extends AgentInstrumentationSpecification {
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_REQUEST_CONTENT_LENGTH" { it == null || it instanceof Long }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" { it == null || it instanceof Long }
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
       }
@@ -467,6 +468,7 @@ class S3TracingTest extends AgentInstrumentationSpecification {
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_REQUEST_CONTENT_LENGTH" { it == null || it instanceof Long }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" { it == null || it instanceof Long }
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
       }
@@ -514,6 +516,7 @@ class S3TracingTest extends AgentInstrumentationSpecification {
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_REQUEST_CONTENT_LENGTH" { it == null || it instanceof Long }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" { it == null || it instanceof Long }
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
       }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/SnsTracingTest.groovy b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/SnsTracingTest.groovy
index 97749cf085..a0b83ca870 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/SnsTracingTest.groovy
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/javaagent/src/test/groovy/SnsTracingTest.groovy
@@ -131,6 +131,7 @@ class SnsTracingTest extends AgentInstrumentationSpecification {
             "$SemanticAttributes.NET_PROTOCOL_VERSION" "1.1"
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" Long
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
       }
@@ -154,6 +155,7 @@ class SnsTracingTest extends AgentInstrumentationSpecification {
             "$SemanticAttributes.NET_PROTOCOL_VERSION" "1.1"
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" Long
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
       }
@@ -176,6 +178,7 @@ class SnsTracingTest extends AgentInstrumentationSpecification {
             "$SemanticAttributes.NET_PROTOCOL_VERSION" "1.1"
             "net.peer.port" { it == null || Number }
             "$SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH" Long
+            "aws.sns.topic.arn" "$topicArn"
           }
         }
         span(1) {
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
index 6cf49a21c4..3705634153 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library-autoconfigure/build.gradle.kts
@@ -18,6 +18,13 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // last version that does not use json protocol
   latestDepTestLibrary("com.amazonaws:aws-java-sdk-sqs:1.12.583")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
index bfe844e413..dec4935b55 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/build.gradle.kts
@@ -17,6 +17,14 @@ dependencies {
   testLibrary("com.amazonaws:aws-java-sdk-kinesis:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   testLibrary("com.amazonaws:aws-java-sdk-sns:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  testLibrary("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  testLibrary("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  testLibrary("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  testLibrary("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // last version that does not use json protocol
   latestDepTestLibrary("com.amazonaws:aws-java-sdk-sqs:1.12.583")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java
new file mode 100644
index 0000000000..e890cb3c0f
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsBedrockResourceType.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_DATA_SOURCE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_KNOWLEDGE_BASE_ID;
+
+import io.opentelemetry.api.common.AttributeKey;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+
+enum AwsBedrockResourceType {
+  AGENT_TYPE(AWS_AGENT_ID, RequestAccess::getAgentId),
+  DATA_SOURCE_TYPE(AWS_DATA_SOURCE_ID, RequestAccess::getDataSourceId),
+  KNOWLEDGE_BASE_TYPE(AWS_KNOWLEDGE_BASE_ID, RequestAccess::getKnowledgeBaseId);
+
+  @SuppressWarnings("ImmutableEnumChecker")
+  private final AttributeKey<String> keyAttribute;
+
+  @SuppressWarnings("ImmutableEnumChecker")
+  private final Function<Object, String> attributeValueAccessor;
+
+  AwsBedrockResourceType(
+      AttributeKey<String> keyAttribute, Function<Object, String> attributeValueAccessor) {
+    this.keyAttribute = keyAttribute;
+    this.attributeValueAccessor = attributeValueAccessor;
+  }
+
+  public AttributeKey<String> getKeyAttribute() {
+    return keyAttribute;
+  }
+
+  public Function<Object, String> getAttributeValueAccessor() {
+    return attributeValueAccessor;
+  }
+
+  public static AwsBedrockResourceType getRequestType(String requestClass) {
+    return AwsBedrockResourceTypeMap.BEDROCK_REQUEST_MAP.get(requestClass);
+  }
+
+  public static AwsBedrockResourceType getResponseType(String responseClass) {
+    return AwsBedrockResourceTypeMap.BEDROCK_RESPONSE_MAP.get(responseClass);
+  }
+
+  private static class AwsBedrockResourceTypeMap {
+    private static final Map<String, AwsBedrockResourceType> BEDROCK_REQUEST_MAP = new HashMap<>();
+    private static final Map<String, AwsBedrockResourceType> BEDROCK_RESPONSE_MAP = new HashMap<>();
+
+    // Bedrock request/response mapping
+    // We only support operations that are related to the resource and where the context contains
+    // the AgentID/DataSourceID/KnowledgeBaseID.
+    // AgentID
+    private static final List<String> agentRequestClasses =
+        Arrays.asList(
+            "CreateAgentActionGroupRequest",
+            "CreateAgentAliasRequest",
+            "DeleteAgentActionGroupRequest",
+            "DeleteAgentAliasRequest",
+            "DeleteAgentRequest",
+            "DeleteAgentVersionRequest",
+            "GetAgentActionGroupRequest",
+            "GetAgentAliasRequest",
+            "GetAgentRequest",
+            "GetAgentVersionRequest",
+            "ListAgentActionGroupsRequest",
+            "ListAgentAliasesRequest",
+            "ListAgentKnowledgeBasesRequest",
+            "ListAgentVersionsRequest",
+            "PrepareAgentRequest",
+            "UpdateAgentActionGroupRequest",
+            "UpdateAgentAliasRequest",
+            "UpdateAgentRequest");
+    private static final List<String> agentResponseClasses =
+        Arrays.asList(
+            "DeleteAgentAliasResult",
+            "DeleteAgentResult",
+            "DeleteAgentVersionResult",
+            "PrepareAgentResult");
+    // DataSourceID
+    private static final List<String> dataSourceRequestClasses =
+        Arrays.asList("DeleteDataSourceRequest", "GetDataSourceRequest", "UpdateDataSourceRequest");
+    private static final List<String> dataSourceResponseClasses =
+        Arrays.asList("DeleteDataSourceResult");
+    // KnowledgeBaseID
+    private static final List<String> knowledgeBaseRequestClasses =
+        Arrays.asList(
+            "AssociateAgentKnowledgeBaseRequest",
+            "CreateDataSourceRequest",
+            "DeleteKnowledgeBaseRequest",
+            "DisassociateAgentKnowledgeBaseRequest",
+            "GetAgentKnowledgeBaseRequest",
+            "GetKnowledgeBaseRequest",
+            "ListDataSourcesRequest",
+            "UpdateAgentKnowledgeBaseRequest");
+    private static final List<String> knowledgeBaseResponseClasses =
+        Arrays.asList("DeleteKnowledgeBaseResult");
+
+    private AwsBedrockResourceTypeMap() {}
+
+    static {
+      // Populate the BEDROCK_REQUEST_MAP
+      for (String agentRequestClass : agentRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(agentRequestClass, AwsBedrockResourceType.AGENT_TYPE);
+      }
+      for (String dataSourceRequestClass : dataSourceRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(dataSourceRequestClass, AwsBedrockResourceType.DATA_SOURCE_TYPE);
+      }
+      for (String knowledgeBaseRequestClass : knowledgeBaseRequestClasses) {
+        BEDROCK_REQUEST_MAP.put(
+            knowledgeBaseRequestClass, AwsBedrockResourceType.KNOWLEDGE_BASE_TYPE);
+      }
+
+      // Populate the BEDROCK_RESPONSE_MAP
+      for (String agentResponseClass : agentResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(agentResponseClass, AwsBedrockResourceType.AGENT_TYPE);
+      }
+      for (String dataSourceResponseClass : dataSourceResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(dataSourceResponseClass, AwsBedrockResourceType.DATA_SOURCE_TYPE);
+      }
+      for (String knowledgeBaseResponseClass : knowledgeBaseResponseClasses) {
+        BEDROCK_REQUEST_MAP.put(
+            knowledgeBaseResponseClass, AwsBedrockResourceType.KNOWLEDGE_BASE_TYPE);
+      }
+    }
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
index 3e8fddec5c..6c8e476c0a 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsExperimentalAttributes.java
@@ -19,5 +19,54 @@ final class AwsExperimentalAttributes {
   static final AttributeKey<String> AWS_TABLE_NAME = stringKey("aws.table.name");
   static final AttributeKey<String> AWS_REQUEST_ID = stringKey("aws.requestId");
 
+  static final AttributeKey<String> AWS_AGENT_ID = stringKey("aws.bedrock.agent.id");
+
+  static final AttributeKey<String> AWS_KNOWLEDGE_BASE_ID =
+      stringKey("aws.bedrock.knowledge_base.id");
+
+  static final AttributeKey<String> AWS_DATA_SOURCE_ID = stringKey("aws.bedrock.data_source.id");
+
+  static final AttributeKey<String> AWS_GUARDRAIL_ID = stringKey("aws.bedrock.guardrail.id");
+
+  static final AttributeKey<String> AWS_GUARDRAIL_ARN = stringKey("aws.bedrock.guardrail.arn");
+
+  // TODO: Merge in gen_ai attributes in opentelemetry-semconv-incubating once upgrade to v1.26.0
+  static final AttributeKey<String> AWS_BEDROCK_RUNTIME_MODEL_ID =
+      stringKey("gen_ai.request.model");
+
+  static final AttributeKey<String> AWS_BEDROCK_SYSTEM = stringKey("gen_ai.system");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_MAX_TOKENS =
+      stringKey("gen_ai.request.max_tokens");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_TEMPERATURE =
+      stringKey("gen_ai.request.temperature");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_TOP_P = stringKey("gen_ai.request.top_p");
+
+  static final AttributeKey<String> GEN_AI_RESPONSE_FINISH_REASONS =
+      stringKey("gen_ai.response.finish_reasons");
+
+  static final AttributeKey<String> GEN_AI_USAGE_INPUT_TOKENS =
+      stringKey("gen_ai.usage.input_tokens");
+
+  static final AttributeKey<String> GEN_AI_USAGE_OUTPUT_TOKENS =
+      stringKey("gen_ai.usage.output_tokens");
+
+  static final AttributeKey<String> AWS_STATE_MACHINE_ARN =
+      stringKey("aws.stepfunctions.state_machine.arn");
+
+  static final AttributeKey<String> AWS_STEP_FUNCTIONS_ACTIVITY_ARN =
+      stringKey("aws.stepfunctions.activity.arn");
+
+  static final AttributeKey<String> AWS_SNS_TOPIC_ARN = stringKey("aws.sns.topic.arn");
+
+  static final AttributeKey<String> AWS_SECRET_ARN = stringKey("aws.secretsmanager.secret.arn");
+
+  static final AttributeKey<String> AWS_LAMBDA_NAME = stringKey("aws.lambda.function.name");
+
+  static final AttributeKey<String> AWS_LAMBDA_RESOURCE_ID =
+      stringKey("aws.lambda.resource_mapping.id");
+
   private AwsExperimentalAttributes() {}
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
index 245f09a5d8..a76a179748 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/AwsSdkExperimentalAttributesExtractor.java
@@ -6,13 +6,31 @@
 package io.opentelemetry.instrumentation.awssdk.v1_11;
 
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_AGENT_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BEDROCK_RUNTIME_MODEL_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BEDROCK_SYSTEM;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_BUCKET_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_ENDPOINT;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_GUARDRAIL_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_GUARDRAIL_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_KNOWLEDGE_BASE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_LAMBDA_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_LAMBDA_RESOURCE_ID;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_QUEUE_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_QUEUE_URL;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_REQUEST_ID;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_SECRET_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_SNS_TOPIC_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STATE_MACHINE_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STEP_FUNCTIONS_ACTIVITY_ARN;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_STREAM_NAME;
 import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.AWS_TABLE_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_MAX_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_TEMPERATURE;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_REQUEST_TOP_P;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_RESPONSE_FINISH_REASONS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_USAGE_INPUT_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v1_11.AwsExperimentalAttributes.GEN_AI_USAGE_OUTPUT_TOKENS;
 
 import com.amazonaws.AmazonWebServiceResponse;
 import com.amazonaws.Request;
@@ -21,12 +39,17 @@ import io.opentelemetry.api.common.AttributeKey;
 import io.opentelemetry.api.common.AttributesBuilder;
 import io.opentelemetry.context.Context;
 import io.opentelemetry.instrumentation.api.instrumenter.AttributesExtractor;
+import java.util.Objects;
 import java.util.function.Function;
 import javax.annotation.Nullable;
 
 class AwsSdkExperimentalAttributesExtractor
     implements AttributesExtractor<Request<?>, Response<?>> {
   private static final String COMPONENT_NAME = "java-aws-sdk";
+  private static final String BEDROCK_SERVICE = "AmazonBedrock";
+  private static final String BEDROCK_AGENT_SERVICE = "AWSBedrockAgent";
+  private static final String BEDROCK_AGENT_RUNTIME_SERVICE = "AWSBedrockAgentRuntime";
+  private static final String BEDROCK_RUNTIME_SERVICE = "AmazonBedrockRuntime";
 
   @Override
   public void onStart(AttributesBuilder attributes, Context parentContext, Request<?> request) {
@@ -34,21 +57,29 @@ class AwsSdkExperimentalAttributesExtractor
     attributes.put(AWS_ENDPOINT, request.getEndpoint().toString());
 
     Object originalRequest = request.getOriginalRequest();
-    setRequestAttribute(attributes, AWS_BUCKET_NAME, originalRequest, RequestAccess::getBucketName);
-    setRequestAttribute(attributes, AWS_QUEUE_URL, originalRequest, RequestAccess::getQueueUrl);
-    setRequestAttribute(attributes, AWS_QUEUE_NAME, originalRequest, RequestAccess::getQueueName);
-    setRequestAttribute(attributes, AWS_STREAM_NAME, originalRequest, RequestAccess::getStreamName);
-    setRequestAttribute(attributes, AWS_TABLE_NAME, originalRequest, RequestAccess::getTableName);
-  }
-
-  private static void setRequestAttribute(
-      AttributesBuilder attributes,
-      AttributeKey<String> key,
-      Object request,
-      Function<Object, String> getter) {
-    String value = getter.apply(request);
-    if (value != null) {
-      attributes.put(key, value);
+    String requestClassName = originalRequest.getClass().getSimpleName();
+    setAttribute(attributes, AWS_BUCKET_NAME, originalRequest, RequestAccess::getBucketName);
+    setAttribute(attributes, AWS_QUEUE_URL, originalRequest, RequestAccess::getQueueUrl);
+    setAttribute(attributes, AWS_QUEUE_NAME, originalRequest, RequestAccess::getQueueName);
+    setAttribute(attributes, AWS_STREAM_NAME, originalRequest, RequestAccess::getStreamName);
+    setAttribute(attributes, AWS_TABLE_NAME, originalRequest, RequestAccess::getTableName);
+    setAttribute(
+        attributes, AWS_STATE_MACHINE_ARN, originalRequest, RequestAccess::getStateMachineArn);
+    setAttribute(
+        attributes,
+        AWS_STEP_FUNCTIONS_ACTIVITY_ARN,
+        originalRequest,
+        RequestAccess::getStepFunctionsActivityArn);
+    setAttribute(attributes, AWS_SNS_TOPIC_ARN, originalRequest, RequestAccess::getSnsTopicArn);
+    setAttribute(attributes, AWS_SECRET_ARN, originalRequest, RequestAccess::getSecretArn);
+    setAttribute(attributes, AWS_LAMBDA_NAME, originalRequest, RequestAccess::getLambdaName);
+    setAttribute(
+        attributes, AWS_LAMBDA_RESOURCE_ID, originalRequest, RequestAccess::getLambdaResourceId);
+    // Get serviceName defined in the AWS Java SDK V1 Request class.
+    String serviceName = request.getServiceName();
+    // Extract request attributes only for Bedrock services.
+    if (isBedrockService(serviceName)) {
+      bedrockOnStart(attributes, originalRequest, requestClassName, serviceName);
     }
   }
 
@@ -59,12 +90,136 @@ class AwsSdkExperimentalAttributesExtractor
       Request<?> request,
       @Nullable Response<?> response,
       @Nullable Throwable error) {
-    if (response != null && response.getAwsResponse() instanceof AmazonWebServiceResponse) {
-      AmazonWebServiceResponse<?> awsResp = (AmazonWebServiceResponse<?>) response.getAwsResponse();
-      String requestId = awsResp.getRequestId();
-      if (requestId != null) {
-        attributes.put(AWS_REQUEST_ID, requestId);
+    if (response != null) {
+      Object awsResp = response.getAwsResponse();
+      setAttribute(attributes, AWS_STATE_MACHINE_ARN, awsResp, RequestAccess::getStateMachineArn);
+      setAttribute(
+          attributes,
+          AWS_STEP_FUNCTIONS_ACTIVITY_ARN,
+          awsResp,
+          RequestAccess::getStepFunctionsActivityArn);
+      setAttribute(attributes, AWS_SNS_TOPIC_ARN, awsResp, RequestAccess::getSnsTopicArn);
+      setAttribute(attributes, AWS_SECRET_ARN, awsResp, RequestAccess::getSecretArn);
+      if (awsResp instanceof AmazonWebServiceResponse) {
+        AmazonWebServiceResponse<?> awsWebServiceResponse = (AmazonWebServiceResponse<?>) awsResp;
+        String requestId = awsWebServiceResponse.getRequestId();
+        if (requestId != null) {
+          attributes.put(AWS_REQUEST_ID, requestId);
+        }
+      }
+      // Get serviceName defined in the AWS Java SDK V1 Request class.
+      String serviceName = request.getServiceName();
+      // Extract response attributes for Bedrock services
+      if (awsResp != null && isBedrockService(serviceName)) {
+        bedrockOnEnd(attributes, awsResp, serviceName);
       }
     }
   }
+
+  private static void bedrockOnStart(
+      AttributesBuilder attributes,
+      Object originalRequest,
+      String requestClassName,
+      String serviceName) {
+    switch (serviceName) {
+      case BEDROCK_SERVICE:
+        setAttribute(attributes, AWS_GUARDRAIL_ID, originalRequest, RequestAccess::getGuardrailId);
+        break;
+      case BEDROCK_AGENT_SERVICE:
+        AwsBedrockResourceType resourceType =
+            AwsBedrockResourceType.getRequestType(requestClassName);
+        if (resourceType != null) {
+          setAttribute(
+              attributes,
+              resourceType.getKeyAttribute(),
+              originalRequest,
+              resourceType.getAttributeValueAccessor());
+        }
+        break;
+      case BEDROCK_AGENT_RUNTIME_SERVICE:
+        setAttribute(attributes, AWS_AGENT_ID, originalRequest, RequestAccess::getAgentId);
+        setAttribute(
+            attributes, AWS_KNOWLEDGE_BASE_ID, originalRequest, RequestAccess::getKnowledgeBaseId);
+        break;
+      case BEDROCK_RUNTIME_SERVICE:
+        if (!Objects.equals(requestClassName, "InvokeModelRequest")) {
+          break;
+        }
+        attributes.put(AWS_BEDROCK_SYSTEM, "aws.bedrock");
+        Function<Object, String> getter = RequestAccess::getModelId;
+        String modelId = getter.apply(originalRequest);
+        attributes.put(AWS_BEDROCK_RUNTIME_MODEL_ID, modelId);
+
+        setAttribute(
+            attributes, GEN_AI_REQUEST_MAX_TOKENS, originalRequest, RequestAccess::getMaxTokens);
+        setAttribute(
+            attributes, GEN_AI_REQUEST_TEMPERATURE, originalRequest, RequestAccess::getTemperature);
+        setAttribute(attributes, GEN_AI_REQUEST_TOP_P, originalRequest, RequestAccess::getTopP);
+        setAttribute(
+            attributes, GEN_AI_USAGE_INPUT_TOKENS, originalRequest, RequestAccess::getInputTokens);
+        break;
+      default:
+        break;
+    }
+  }
+
+  private static void bedrockOnEnd(
+      AttributesBuilder attributes, Object awsResp, String serviceName) {
+    switch (serviceName) {
+      case BEDROCK_SERVICE:
+        setAttribute(attributes, AWS_GUARDRAIL_ID, awsResp, RequestAccess::getGuardrailId);
+        setAttribute(attributes, AWS_GUARDRAIL_ARN, awsResp, RequestAccess::getGuardrailArn);
+        break;
+      case BEDROCK_AGENT_SERVICE:
+        String responseClassName = awsResp.getClass().getSimpleName();
+        AwsBedrockResourceType resourceType =
+            AwsBedrockResourceType.getResponseType(responseClassName);
+        if (resourceType != null) {
+          setAttribute(
+              attributes,
+              resourceType.getKeyAttribute(),
+              awsResp,
+              resourceType.getAttributeValueAccessor());
+        }
+        break;
+      case BEDROCK_AGENT_RUNTIME_SERVICE:
+        setAttribute(attributes, AWS_AGENT_ID, awsResp, RequestAccess::getAgentId);
+        setAttribute(attributes, AWS_KNOWLEDGE_BASE_ID, awsResp, RequestAccess::getKnowledgeBaseId);
+        break;
+      case BEDROCK_RUNTIME_SERVICE:
+        if (!Objects.equals(awsResp.getClass().getSimpleName(), "InvokeModelResult")) {
+          break;
+        }
+
+        setAttribute(attributes, GEN_AI_USAGE_INPUT_TOKENS, awsResp, RequestAccess::getInputTokens);
+        setAttribute(
+            attributes, GEN_AI_USAGE_OUTPUT_TOKENS, awsResp, RequestAccess::getOutputTokens);
+        setAttribute(
+            attributes, GEN_AI_RESPONSE_FINISH_REASONS, awsResp, RequestAccess::getFinishReasons);
+        break;
+      default:
+        break;
+    }
+  }
+
+  private static boolean isBedrockService(String serviceName) {
+    // Check if the serviceName belongs to Bedrock Services defined in AWS Java SDK V1.
+    // For example <a
+    // href="https://github.com/aws/aws-sdk-java/blob/38031248a696468e19a4670c0c4585637d5e7cc6/aws-java-sdk-bedrock/src/main/java/com/amazonaws/services/bedrock/AmazonBedrock.java#L34">AmazonBedrock</a>
+    return serviceName.equals(BEDROCK_SERVICE)
+        || serviceName.equals(BEDROCK_AGENT_SERVICE)
+        || serviceName.equals(BEDROCK_AGENT_RUNTIME_SERVICE)
+        || serviceName.equals(BEDROCK_RUNTIME_SERVICE);
+  }
+
+  private static void setAttribute(
+      AttributesBuilder attributes,
+      AttributeKey<String> key,
+      Object request,
+      Function<Object, String> getter) {
+    String value = getter.apply(request);
+    if (value != null) {
+      attributes.put(key, value);
+    }
+  }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java
new file mode 100644
index 0000000000..d1acc5768a
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParser.java
@@ -0,0 +1,267 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class BedrockJsonParser {
+
+  // Prevent instantiation
+  private BedrockJsonParser() {
+    throw new UnsupportedOperationException("Utility class");
+  }
+
+  public static LlmJson parse(String jsonString) {
+    JsonParser parser = new JsonParser(jsonString);
+    Map<String, Object> jsonBody = parser.parse();
+    return new LlmJson(jsonBody);
+  }
+
+  static class JsonParser {
+    private final String json;
+    private int position;
+
+    public JsonParser(String json) {
+      this.json = json.trim();
+      this.position = 0;
+    }
+
+    private void skipWhitespace() {
+      while (position < json.length() && Character.isWhitespace(json.charAt(position))) {
+        position++;
+      }
+    }
+
+    private char currentChar() {
+      return json.charAt(position);
+    }
+
+    private static boolean isHexDigit(char c) {
+      return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+    }
+
+    private void expect(char c) {
+      skipWhitespace();
+      if (currentChar() != c) {
+        throw new IllegalArgumentException(
+            "Expected '" + c + "' but found '" + currentChar() + "'");
+      }
+      position++;
+    }
+
+    private String readString() {
+      skipWhitespace();
+      expect('"'); // Ensure the string starts with a quote
+      StringBuilder result = new StringBuilder();
+      while (currentChar() != '"') {
+        // Handle escape sequences
+        if (currentChar() == '\\') {
+          position++; // Move past the backslash
+          if (position >= json.length()) {
+            throw new IllegalArgumentException("Unexpected end of input in string escape sequence");
+          }
+          char escapeChar = currentChar();
+          switch (escapeChar) {
+            case '"':
+            case '\\':
+            case '/':
+              result.append(escapeChar);
+              break;
+            case 'b':
+              result.append('\b');
+              break;
+            case 'f':
+              result.append('\f');
+              break;
+            case 'n':
+              result.append('\n');
+              break;
+            case 'r':
+              result.append('\r');
+              break;
+            case 't':
+              result.append('\t');
+              break;
+            case 'u': // Unicode escape sequence
+              if (position + 4 >= json.length()) {
+                throw new IllegalArgumentException("Invalid unicode escape sequence in string");
+              }
+              char[] hexChars = new char[4];
+              for (int i = 0; i < 4; i++) {
+                position++; // Move to the next character
+                char hexChar = json.charAt(position);
+                if (!isHexDigit(hexChar)) {
+                  throw new IllegalArgumentException(
+                      "Invalid hexadecimal digit in unicode escape sequence");
+                }
+                hexChars[i] = hexChar;
+              }
+              int unicodeValue = Integer.parseInt(new String(hexChars), 16);
+              result.append((char) unicodeValue);
+              break;
+            default:
+              throw new IllegalArgumentException("Invalid escape character: \\" + escapeChar);
+          }
+          position++;
+        } else {
+          result.append(currentChar());
+          position++;
+        }
+      }
+      position++; // Skip closing quote
+      return result.toString();
+    }
+
+    private Object readValue() {
+      skipWhitespace();
+      char c = currentChar();
+
+      if (c == '"') {
+        return readString();
+      } else if (Character.isDigit(c)) {
+        return readScopedNumber();
+      } else if (c == '{') {
+        return readObject(); // JSON Objects
+      } else if (c == '[') {
+        return readArray(); // JSON Arrays
+      } else if (json.startsWith("true", position)) {
+        position += 4;
+        return true;
+      } else if (json.startsWith("false", position)) {
+        position += 5;
+        return false;
+      } else if (json.startsWith("null", position)) {
+        position += 4;
+        return null; // JSON null
+      } else {
+        throw new IllegalArgumentException("Unexpected character: " + c);
+      }
+    }
+
+    private Number readScopedNumber() {
+      int start = position;
+
+      // Consume digits and the optional decimal point
+      while (position < json.length()
+          && (Character.isDigit(json.charAt(position)) || json.charAt(position) == '.')) {
+        position++;
+      }
+
+      String number = json.substring(start, position);
+
+      if (number.contains(".")) {
+        double value = Double.parseDouble(number);
+        if (value < 0.0 || value > 1.0) {
+          throw new IllegalArgumentException(
+              "Value out of bounds for Bedrock Floating Point Attribute: " + number);
+        }
+        return value;
+      } else {
+        return Integer.parseInt(number);
+      }
+    }
+
+    private Map<String, Object> readObject() {
+      Map<String, Object> map = new HashMap<>();
+      expect('{');
+      skipWhitespace();
+      while (currentChar() != '}') {
+        String key = readString();
+        expect(':');
+        Object value = readValue();
+        map.put(key, value);
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++; // Skip closing brace
+      return map;
+    }
+
+    private List<Object> readArray() {
+      List<Object> list = new ArrayList<>();
+      expect('[');
+      skipWhitespace();
+      while (currentChar() != ']') {
+        list.add(readValue());
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++;
+      return list;
+    }
+
+    public Map<String, Object> parse() {
+      return readObject();
+    }
+  }
+
+  // Resolves paths in a JSON structure
+  static class JsonPathResolver {
+
+    // Private constructor to prevent instantiation
+    private JsonPathResolver() {
+      throw new UnsupportedOperationException("Utility class");
+    }
+
+    public static Object resolvePath(LlmJson llmJson, String... paths) {
+      for (String path : paths) {
+        Object value = resolvePath(llmJson.getJsonBody(), path);
+        if (value != null) {
+          return value;
+        }
+      }
+      return null;
+    }
+
+    private static Object resolvePath(Map<String, Object> json, String path) {
+      String[] keys = path.split("/");
+      Object current = json;
+
+      for (String key : keys) {
+        if (key.isEmpty()) {
+          continue;
+        }
+
+        if (current instanceof Map) {
+          current = ((Map<?, ?>) current).get(key);
+        } else if (current instanceof List) {
+          try {
+            int index = Integer.parseInt(key);
+            current = ((List<?>) current).get(index);
+          } catch (NumberFormatException | IndexOutOfBoundsException e) {
+            return null;
+          }
+        } else {
+          return null;
+        }
+
+        if (current == null) {
+          return null;
+        }
+      }
+      return current;
+    }
+  }
+
+  public static class LlmJson {
+    private final Map<String, Object> jsonBody;
+
+    public LlmJson(Map<String, Object> jsonBody) {
+      this.jsonBody = jsonBody;
+    }
+
+    public Map<String, Object> getJsonBody() {
+      return jsonBody;
+    }
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
index bb2ae9266c..8bcde62272 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v1_11/RequestAccess.java
@@ -8,6 +8,12 @@ package io.opentelemetry.instrumentation.awssdk.v1_11;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
+import java.lang.reflect.Method;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Objects;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 final class RequestAccess {
@@ -20,36 +26,374 @@ final class RequestAccess {
         }
       };
 
+  @Nullable
+  private static BedrockJsonParser.LlmJson parseTargetBody(ByteBuffer buffer) {
+    try {
+      byte[] bytes;
+      // Create duplicate to avoid mutating the original buffer position
+      ByteBuffer duplicate = buffer.duplicate();
+      if (buffer.hasArray()) {
+        bytes =
+            Arrays.copyOfRange(
+                duplicate.array(),
+                duplicate.arrayOffset(),
+                duplicate.arrayOffset() + duplicate.remaining());
+      } else {
+        bytes = new byte[buffer.remaining()];
+        buffer.get(bytes);
+      }
+      String jsonString = new String(bytes, StandardCharsets.UTF_8); // Convert to String
+      return BedrockJsonParser.parse(jsonString);
+    } catch (RuntimeException e) {
+      return null;
+    }
+  }
+
+  @Nullable
+  private static BedrockJsonParser.LlmJson getJsonBody(Object target) {
+    if (target == null) {
+      return null;
+    }
+
+    RequestAccess access = REQUEST_ACCESSORS.get(target.getClass());
+    ByteBuffer bodyBuffer = invokeOrNullGeneric(access.getBody, target, ByteBuffer.class);
+    if (bodyBuffer == null) {
+      return null;
+    }
+
+    return parseTargetBody(bodyBuffer);
+  }
+
+  @Nullable
+  private static String findFirstMatchingPath(BedrockJsonParser.LlmJson jsonBody, String... paths) {
+    if (jsonBody == null) {
+      return null;
+    }
+
+    return Stream.of(paths)
+        .map(path -> BedrockJsonParser.JsonPathResolver.resolvePath(jsonBody, path))
+        .filter(Objects::nonNull)
+        .map(Object::toString)
+        .findFirst()
+        .orElse(null);
+  }
+
+  @Nullable
+  private static String approximateTokenCount(
+      BedrockJsonParser.LlmJson jsonBody, String... textPaths) {
+    if (jsonBody == null) {
+      return null;
+    }
+
+    return Stream.of(textPaths)
+        .map(path -> BedrockJsonParser.JsonPathResolver.resolvePath(jsonBody, path))
+        .filter(value -> value instanceof String)
+        .map(value -> Integer.toString((int) Math.ceil(((String) value).length() / 6.0)))
+        .findFirst()
+        .orElse(null);
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/max_new_tokens"
+  // Amazon Titan -> "/textGenerationConfig/maxTokenCount"
+  // Anthropic Claude -> "/max_tokens"
+  // Cohere Command -> "/max_tokens"
+  // Cohere Command R -> "/max_tokens"
+  // AI21 Jamba -> "/max_tokens"
+  // Meta Llama -> "/max_gen_len"
+  // Mistral AI -> "/max_tokens"
+  @Nullable
+  static String getMaxTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody,
+        "/max_tokens",
+        "/max_gen_len",
+        "/textGenerationConfig/maxTokenCount",
+        "/inferenceConfig/max_new_tokens");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/temperature"
+  // Amazon Titan -> "/textGenerationConfig/temperature"
+  // Anthropic Claude -> "/temperature"
+  // Cohere Command -> "/temperature"
+  // Cohere Command R -> "/temperature"
+  // AI21 Jamba -> "/temperature"
+  // Meta Llama -> "/temperature"
+  // Mistral AI -> "/temperature"
+  @Nullable
+  static String getTemperature(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody,
+        "/temperature",
+        "/textGenerationConfig/temperature",
+        "inferenceConfig/temperature");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/top_p"
+  // Amazon Titan -> "/textGenerationConfig/topP"
+  // Anthropic Claude -> "/top_p"
+  // Cohere Command -> "/p"
+  // Cohere Command R -> "/p"
+  // AI21 Jamba -> "/top_p"
+  // Meta Llama -> "/top_p"
+  // Mistral AI -> "/top_p"
+  @Nullable
+  static String getTopP(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    return findFirstMatchingPath(
+        jsonBody, "/top_p", "/p", "/textGenerationConfig/topP", "/inferenceConfig/top_p");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/inputTokens"
+  // Amazon Titan -> "/inputTextTokenCount"
+  // Anthropic Claude -> "/usage/input_tokens"
+  // Cohere Command -> "/prompt"
+  // Cohere Command R -> "/message"
+  // AI21 Jamba -> "/usage/prompt_tokens"
+  // Meta Llama -> "/prompt_token_count"
+  // Mistral AI -> "/prompt"
+  @Nullable
+  static String getInputTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    if (jsonBody == null) {
+      return null;
+    }
+
+    // Try direct token counts first
+    String directCount =
+        findFirstMatchingPath(
+            jsonBody,
+            "/inputTextTokenCount",
+            "/prompt_token_count",
+            "/usage/input_tokens",
+            "/usage/prompt_tokens",
+            "/usage/inputTokens");
+
+    if (directCount != null && !directCount.equals("null")) {
+      return directCount;
+    }
+
+    // Fall back to token approximation
+    return approximateTokenCount(jsonBody, "/prompt", "/message");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/outputTokens"
+  // Amazon Titan -> "/results/0/tokenCount"
+  // Anthropic Claude -> "/usage/output_tokens"
+  // Cohere Command -> "/generations/0/text"
+  // Cohere Command R -> "/text"
+  // AI21 Jamba -> "/usage/completion_tokens"
+  // Meta Llama -> "/generation_token_count"
+  // Mistral AI -> "/outputs/0/text"
+  @Nullable
+  static String getOutputTokens(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    if (jsonBody == null) {
+      return null;
+    }
+
+    // Try direct token counts first
+    String directCount =
+        findFirstMatchingPath(
+            jsonBody,
+            "/generation_token_count",
+            "/results/0/tokenCount",
+            "/usage/output_tokens",
+            "/usage/completion_tokens",
+            "/usage/outputTokens");
+
+    if (directCount != null && !directCount.equals("null")) {
+      return directCount;
+    }
+
+    // Fall back to token approximation
+    return approximateTokenCount(jsonBody, "/text", "/outputs/0/text");
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/stopReason"
+  // Amazon Titan -> "/results/0/completionReason"
+  // Anthropic Claude -> "/stop_reason"
+  // Cohere Command -> "/generations/0/finish_reason"
+  // Cohere Command R -> "/finish_reason"
+  // AI21 Jamba -> "/choices/0/finish_reason"
+  // Meta Llama -> "/stop_reason"
+  // Mistral AI -> "/outputs/0/stop_reason"
+  @Nullable
+  static String getFinishReasons(Object target) {
+    BedrockJsonParser.LlmJson jsonBody = getJsonBody(target);
+    String finishReason =
+        findFirstMatchingPath(
+            jsonBody,
+            "/stopReason",
+            "/finish_reason",
+            "/stop_reason",
+            "/results/0/completionReason",
+            "/generations/0/finish_reason",
+            "/choices/0/finish_reason",
+            "/outputs/0/stop_reason");
+
+    return finishReason != null ? "[" + finishReason + "]" : null;
+  }
+
+  @Nullable
+  static String getLambdaName(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getLambdaName, request);
+  }
+
+  @Nullable
+  static String getLambdaResourceId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getLambdaResourceId, request);
+  }
+
+  @Nullable
+  static String getSecretArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getSecretArn, request);
+  }
+
+  @Nullable
+  static String getSnsTopicArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getSnsTopicArn, request);
+  }
+
+  @Nullable
+  static String getStepFunctionsActivityArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getStepFunctionsActivityArn, request);
+  }
+
+  @Nullable
+  static String getStateMachineArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getStateMachineArn, request);
+  }
+
   @Nullable
   static String getBucketName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getBucketName, request);
   }
 
   @Nullable
   static String getQueueUrl(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getQueueUrl, request);
   }
 
   @Nullable
   static String getQueueName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getQueueName, request);
   }
 
   @Nullable
   static String getStreamName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getStreamName, request);
   }
 
   @Nullable
   static String getTableName(Object request) {
+    if (request == null) {
+      return null;
+    }
     RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
     return invokeOrNull(access.getTableName, request);
   }
 
+  @Nullable
+  static String getAgentId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getAgentId, request);
+  }
+
+  @Nullable
+  static String getKnowledgeBaseId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getKnowledgeBaseId, request);
+  }
+
+  @Nullable
+  static String getDataSourceId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getDataSourceId, request);
+  }
+
+  @Nullable
+  static String getGuardrailId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getGuardrailId, request);
+  }
+
+  @Nullable
+  static String getGuardrailArn(Object request) {
+    if (request == null) {
+      return null;
+    }
+    return findNestedAccessorOrNull(request, "getGuardrailArn");
+  }
+
+  @Nullable
+  static String getModelId(Object request) {
+    if (request == null) {
+      return null;
+    }
+    RequestAccess access = REQUEST_ACCESSORS.get(request.getClass());
+    return invokeOrNull(access.getModelId, request);
+  }
+
   @Nullable
   private static String invokeOrNull(@Nullable MethodHandle method, Object obj) {
     if (method == null) {
@@ -62,27 +406,82 @@ final class RequestAccess {
     }
   }
 
+  @Nullable
+  private static <T> T invokeOrNullGeneric(
+      @Nullable MethodHandle method, Object obj, Class<T> returnType) {
+    if (method == null) {
+      return null;
+    }
+    try {
+      return returnType.cast(method.invoke(obj));
+    } catch (Throwable e) {
+      return null;
+    }
+  }
+
   @Nullable private final MethodHandle getBucketName;
   @Nullable private final MethodHandle getQueueUrl;
   @Nullable private final MethodHandle getQueueName;
   @Nullable private final MethodHandle getStreamName;
   @Nullable private final MethodHandle getTableName;
+  @Nullable private final MethodHandle getAgentId;
+  @Nullable private final MethodHandle getKnowledgeBaseId;
+  @Nullable private final MethodHandle getDataSourceId;
+  @Nullable private final MethodHandle getGuardrailId;
+  @Nullable private final MethodHandle getModelId;
+  @Nullable private final MethodHandle getBody;
+  @Nullable private final MethodHandle getStateMachineArn;
+  @Nullable private final MethodHandle getStepFunctionsActivityArn;
+  @Nullable private final MethodHandle getSnsTopicArn;
+  @Nullable private final MethodHandle getSecretArn;
+  @Nullable private final MethodHandle getLambdaName;
+  @Nullable private final MethodHandle getLambdaResourceId;
 
   private RequestAccess(Class<?> clz) {
-    getBucketName = findAccessorOrNull(clz, "getBucketName");
-    getQueueUrl = findAccessorOrNull(clz, "getQueueUrl");
-    getQueueName = findAccessorOrNull(clz, "getQueueName");
-    getStreamName = findAccessorOrNull(clz, "getStreamName");
-    getTableName = findAccessorOrNull(clz, "getTableName");
+    getBucketName = findAccessorOrNull(clz, "getBucketName", String.class);
+    getQueueUrl = findAccessorOrNull(clz, "getQueueUrl", String.class);
+    getQueueName = findAccessorOrNull(clz, "getQueueName", String.class);
+    getStreamName = findAccessorOrNull(clz, "getStreamName", String.class);
+    getTableName = findAccessorOrNull(clz, "getTableName", String.class);
+    getAgentId = findAccessorOrNull(clz, "getAgentId", String.class);
+    getKnowledgeBaseId = findAccessorOrNull(clz, "getKnowledgeBaseId", String.class);
+    getDataSourceId = findAccessorOrNull(clz, "getDataSourceId", String.class);
+    getGuardrailId = findAccessorOrNull(clz, "getGuardrailId", String.class);
+    getModelId = findAccessorOrNull(clz, "getModelId", String.class);
+    getBody = findAccessorOrNull(clz, "getBody", ByteBuffer.class);
+    getStateMachineArn = findAccessorOrNull(clz, "getStateMachineArn", String.class);
+    getStepFunctionsActivityArn = findAccessorOrNull(clz, "getActivityArn", String.class);
+    getSnsTopicArn = findAccessorOrNull(clz, "getTopicArn", String.class);
+    getSecretArn = findAccessorOrNull(clz, "getARN", String.class);
+    getLambdaName = findAccessorOrNull(clz, "getFunctionName", String.class);
+    getLambdaResourceId = findAccessorOrNull(clz, "getUUID", String.class);
   }
 
   @Nullable
-  private static MethodHandle findAccessorOrNull(Class<?> clz, String methodName) {
+  private static MethodHandle findAccessorOrNull(
+      Class<?> clz, String methodName, Class<?> returnType) {
     try {
       return MethodHandles.publicLookup()
-          .findVirtual(clz, methodName, MethodType.methodType(String.class));
+          .findVirtual(clz, methodName, MethodType.methodType(returnType));
     } catch (Throwable t) {
       return null;
     }
   }
+
+  @Nullable
+  private static String findNestedAccessorOrNull(Object obj, String... methodNames) {
+    Object current = obj;
+    for (String methodName : methodNames) {
+      if (current == null) {
+        return null;
+      }
+      try {
+        Method method = current.getClass().getMethod(methodName);
+        current = method.invoke(current);
+      } catch (Exception e) {
+        return null;
+      }
+    }
+    return (current instanceof String) ? (String) current : null;
+  }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy
new file mode 100644
index 0000000000..03563b1d5b
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/BedrockJsonParserTest.groovy
@@ -0,0 +1,107 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v1_11
+
+import spock.lang.Specification
+
+class BedrockJsonParserTest extends Specification {
+  def "should parse simple JSON object"() {
+    given:
+    String json = '{"key":"value"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody() == [key: "value"]
+  }
+
+  def "should parse nested JSON object"() {
+    given:
+    String json = '{"parent":{"child":"value"}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def parent = parsedJson.getJsonBody().get("parent")
+    parent instanceof Map
+    parent["child"] == "value"
+  }
+
+  def "should parse JSON array"() {
+    given:
+    String json = '{"array":[1, "two", 1.0]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def array = parsedJson.getJsonBody().get("array")
+    array instanceof List
+    array == [1, "two", 1.0]
+  }
+
+  def "should parse escape sequences"() {
+    given:
+    String json = '{"escaped":"Line1\\nLine2\\tTabbed\\\"Quoted\\\"\\bBackspace\\fFormfeed\\rCarriageReturn\\\\Backslash\\/Slash\\u0041"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody().get("escaped") ==
+        "Line1\nLine2\tTabbed\"Quoted\"\bBackspace\fFormfeed\rCarriageReturn\\Backslash/SlashA"
+  }
+
+  def "should throw exception for malformed JSON"() {
+    given:
+    String malformedJson = '{"key":value}'
+
+    when:
+    BedrockJsonParser.parse(malformedJson)
+
+    then:
+    def ex = thrown(IllegalArgumentException)
+    ex.message.contains("Unexpected character")
+  }
+
+  def "should resolve path in JSON object"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/parent/child/key")
+
+    then:
+    resolvedValue == "value"
+  }
+
+  def "should resolve path in JSON array"() {
+    given:
+    String json = '{"array":[{"key":"value1"}, {"key":"value2"}]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/array/1/key")
+
+    then:
+    resolvedValue == "value2"
+  }
+
+  def "should return null for invalid path resolution"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/invalid/path")
+
+    then:
+    resolvedValue == null
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
index 548631e9f1..51483839a7 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/build.gradle.kts
@@ -14,6 +14,14 @@ dependencies {
   compileOnly("com.amazonaws:aws-java-sdk-dynamodb:1.11.106")
   compileOnly("com.amazonaws:aws-java-sdk-sns:1.11.106")
   compileOnly("com.amazonaws:aws-java-sdk-sqs:1.11.106")
+  compileOnly("com.amazonaws:aws-java-sdk-secretsmanager:1.11.309")
+  compileOnly("com.amazonaws:aws-java-sdk-stepfunctions:1.11.230")
+  compileOnly("com.amazonaws:aws-java-sdk-lambda:1.11.678")
+
+  compileOnly("com.amazonaws:aws-java-sdk-bedrock:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockagent:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockagentruntime:1.12.744")
+  compileOnly("com.amazonaws:aws-java-sdk-bedrockruntime:1.12.744")
 
   // needed for SQS - using emq directly as localstack references emq v0.15.7 ie WITHOUT AWS trace header propagation
   implementation("org.elasticmq:elasticmq-rest-sqs_2.12:1.0.0")
diff --git a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractAws1ClientTest.groovy b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractAws1ClientTest.groovy
index 95e6ed8985..1c83fa3f9b 100644
--- a/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractAws1ClientTest.groovy
+++ b/instrumentation/aws-sdk/aws-sdk-1.11/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v1_11/AbstractAws1ClientTest.groovy
@@ -27,6 +27,24 @@ import com.amazonaws.services.rds.AmazonRDSClientBuilder
 import com.amazonaws.services.rds.model.DeleteOptionGroupRequest
 import com.amazonaws.services.s3.AmazonS3Client
 import com.amazonaws.services.s3.AmazonS3ClientBuilder
+import com.amazonaws.services.bedrockagent.AWSBedrockAgentClientBuilder
+import com.amazonaws.services.bedrockagent.model.GetAgentRequest
+import com.amazonaws.services.bedrockagent.model.GetKnowledgeBaseRequest
+import com.amazonaws.services.bedrockagent.model.GetDataSourceRequest
+import com.amazonaws.services.bedrock.AmazonBedrockClientBuilder
+import com.amazonaws.services.bedrock.model.GetGuardrailRequest
+import com.amazonaws.services.bedrockruntime.AmazonBedrockRuntimeClientBuilder
+import com.amazonaws.services.bedrockruntime.model.InvokeModelRequest
+import com.amazonaws.services.stepfunctions.AWSStepFunctionsClientBuilder
+import com.amazonaws.services.stepfunctions.model.DescribeStateMachineRequest
+import com.amazonaws.services.stepfunctions.model.DescribeActivityRequest
+import com.amazonaws.services.sns.AmazonSNSClientBuilder
+import com.amazonaws.services.sns.model.PublishRequest
+import com.amazonaws.services.secretsmanager.AWSSecretsManagerClientBuilder
+import com.amazonaws.services.secretsmanager.model.CreateSecretRequest
+import com.amazonaws.services.lambda.AWSLambdaClientBuilder
+import com.amazonaws.services.lambda.model.GetEventSourceMappingRequest
+import com.amazonaws.services.lambda.model.GetFunctionRequest
 import io.opentelemetry.api.trace.Span
 import io.opentelemetry.instrumentation.test.InstrumentationSpecification
 import io.opentelemetry.semconv.SemanticAttributes
@@ -38,6 +56,7 @@ import spock.lang.Shared
 import spock.lang.Unroll
 
 import java.time.Duration
+import java.nio.charset.StandardCharsets
 
 import static io.opentelemetry.api.trace.SpanKind.CLIENT
 import static io.opentelemetry.api.trace.SpanKind.PRODUCER
@@ -156,6 +175,296 @@ abstract class AbstractAws1ClientTest extends InstrumentationSpecification {
           </ResponseMetadata>
         </DeleteOptionGroupResponse>
       """
+    "Bedrock"    | "GetGuardrail"      | "GET" | "/"                   |
+      AmazonBedrockClientBuilder.standard()                             | { c -> c.getGuardrail(new GetGuardrailRequest().withGuardrailIdentifier("guardrailId")) } | ["aws.bedrock.guardrail.id":"guardrailId", "aws.bedrock.guardrail.arn": "guardrailArn"] | """
+        {
+           "blockedInputMessaging": "string",
+           "blockedOutputsMessaging": "string",
+           "contentPolicy": {},
+           "createdAt": "2024-06-12T18:31:45Z",
+           "description": "string",
+           "guardrailArn": "guardrailArn",
+           "guardrailId": "guardrailId",
+           "kmsKeyArn": "string",
+           "name": "string",
+           "sensitiveInformationPolicy": {},
+           "status": "READY",
+           "topicPolicy": {
+              "topics": [
+                 {
+                    "definition": "string",
+                    "examples": [ "string" ],
+                    "name": "string",
+                    "type": "string"
+                 }
+              ]
+           },
+           "updatedAt": "2024-06-12T18:31:48Z",
+           "version": "DRAFT",
+           "wordPolicy": {}
+        }
+      """
+    "AWSBedrockAgent"    | "GetAgent"      | "GET" | "/"                   | AWSBedrockAgentClientBuilder.standard()                             | { c -> c.getAgent(new GetAgentRequest().withAgentId("agentId")) } | ["aws.bedrock.agent.id": "agentId"] | ""
+    "AWSBedrockAgent"    | "GetKnowledgeBase"      | "GET" | "/"                   | AWSBedrockAgentClientBuilder.standard()                             | { c -> c.getKnowledgeBase(new GetKnowledgeBaseRequest().withKnowledgeBaseId("knowledgeBaseId")) } | ["aws.bedrock.knowledge_base.id": "knowledgeBaseId"] | ""
+    "AWSBedrockAgent"    | "GetDataSource"      | "GET" | "/"                   | AWSBedrockAgentClientBuilder.standard()                             | { c -> c.getDataSource(new GetDataSourceRequest().withDataSourceId("datasourceId").withKnowledgeBaseId("knowledgeBaseId")) } | ["aws.bedrock.data_source.id": "datasourceId"] | ""
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("ai21.jamba-1-5-mini-v1:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+            {
+              "messages": [{
+                "role": "user",
+                "message": "Which LLM are you?"
+              }],
+              "max_tokens": 1000,
+              "top_p": 0.8,
+              "temperature": 0.7
+            }
+          '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "ai21.jamba-1-5-mini-v1:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "1000",
+        "gen_ai.request.temperature": "0.7",
+        "gen_ai.request.top_p": "0.8",
+        "gen_ai.response.finish_reasons": "[stop]",
+        "gen_ai.usage.input_tokens": "5",
+        "gen_ai.usage.output_tokens": "42"
+      ] |
+      '''
+    {
+      "choices": [{
+        "finish_reason": "stop"
+      }],
+      "usage": {
+        "prompt_tokens": 5,
+        "completion_tokens": 42
+      }
+    }
+    '''
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("amazon.titan-text-premier-v1:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+            {
+              "inputText": "Hello, world!",
+              "textGenerationConfig": {
+                "temperature": 0.7,
+                "topP": 0.9,
+                "maxTokenCount": 100,
+                "stopSequences": ["END"]
+              }
+            }
+          '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "amazon.titan-text-premier-v1:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "100",
+        "gen_ai.request.temperature": "0.7",
+        "gen_ai.request.top_p": "0.9",
+        "gen_ai.response.finish_reasons": "[stop]",
+        "gen_ai.usage.input_tokens": "5",
+        "gen_ai.usage.output_tokens": "42"
+      ] |
+      '''
+    {
+      "inputTextTokenCount": 5,
+      "results": [
+        {
+          "tokenCount": 42,
+          "outputText": "Hi! I'm Titan, an AI assistant. How can I help you today?",
+          "completionReason": "stop"
+        }
+      ]
+    }
+    '''
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("anthropic.claude-3-5-sonnet-20241022-v2:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+            {
+              "anthropic_version": "bedrock-2023-05-31",
+              "messages": [{
+                "role": "user",
+                "content": "Hello, world"
+              }],
+              "max_tokens": 100,
+              "temperature": 0.7,
+              "top_p": 0.9
+            }
+          '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "anthropic.claude-3-5-sonnet-20241022-v2:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "100",
+        "gen_ai.request.temperature": "0.7",
+        "gen_ai.request.top_p": "0.9",
+        "gen_ai.response.finish_reasons": "[end_turn]",
+        "gen_ai.usage.input_tokens": "2095",
+        "gen_ai.usage.output_tokens": "503"
+      ] |
+      '''
+    {
+      "stop_reason": "end_turn",
+      "usage": {
+        "input_tokens": 2095,
+        "output_tokens": 503
+      }
+    }
+    '''
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("meta.llama3-70b-instruct-v1:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+            {
+              "prompt": "<|begin_of_text|><|start_header_id|>user<|end_header_id|>\\\\nDescribe the purpose of a 'hello world' program in one line. <|eot_id|>\\\\n<|start_header_id|>assistant<|end_header_id|>\\\\n",
+              "max_gen_len": 128,
+              "temperature": 0.1,
+              "top_p": 0.9
+            }
+          '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "meta.llama3-70b-instruct-v1:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "128",
+        "gen_ai.request.temperature": "0.1",
+        "gen_ai.request.top_p": "0.9",
+        "gen_ai.response.finish_reasons": "[stop]",
+        "gen_ai.usage.input_tokens": "2095",
+        "gen_ai.usage.output_tokens": "503"
+      ] |
+      '''
+    {
+      "prompt_token_count": 2095,
+      "generation_token_count": 503,
+      "stop_reason": "stop"
+    }
+    '''
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("cohere.command-r-v1:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+            {
+              "message": "Convince me to write a LISP interpreter in one line.",
+              "temperature": 0.8,
+              "max_tokens": 4096,
+              "p": 0.45 
+            }
+          '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "cohere.command-r-v1:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "4096",
+        "gen_ai.request.temperature": "0.8",
+        "gen_ai.request.top_p": "0.45",
+        "gen_ai.response.finish_reasons": "[COMPLETE]",
+        "gen_ai.usage.input_tokens": "9",
+        "gen_ai.usage.output_tokens": "2"
+      ] |
+      '''
+    {
+      "text": "test-output",
+      "finish_reason": "COMPLETE"
+    }
+    '''
+    "BedrockRuntime" | "InvokeModel" | "POST" | "/" |
+      AmazonBedrockRuntimeClientBuilder.standard() |
+      { c ->
+        c.invokeModel(
+          new InvokeModelRequest()
+            .withModelId("mistral.mistral-large-2402-v1:0")
+            .withBody(StandardCharsets.UTF_8.encode('''
+        {
+            "prompt": "<s>[INST] Describe the difference between a compiler and interpreter in one line. [/INST]\\\\n",
+            "max_tokens": 4096,
+            "temperature": 0.75,
+            "top_p": 0.25
+        }
+    '''))
+        )
+      } |
+      [
+        "gen_ai.request.model": "mistral.mistral-large-2402-v1:0",
+        "gen_ai.system": "aws.bedrock",
+        "gen_ai.request.max_tokens": "4096",
+        "gen_ai.request.temperature": "0.75",
+        "gen_ai.request.top_p": "0.25",
+        "gen_ai.response.finish_reasons": "[stop]",
+        "gen_ai.usage.input_tokens": "16",
+        "gen_ai.usage.output_tokens": "2"
+      ] |
+      '''
+        {
+          "outputs": [{
+            "text": "test-output",
+            "stop_reason": "stop"
+          }]
+        }
+    '''
+    "AWSStepFunctions" | "DescribeStateMachine" | "POST" | "/" | AWSStepFunctionsClientBuilder.standard()
+      | { c -> c.describeStateMachine(new DescribeStateMachineRequest().withStateMachineArn("stateMachineArn")) }
+      | ["aws.stepfunctions.state_machine.arn": "stateMachineArn"]
+      | ""
+    "AWSStepFunctions" | "DescribeActivity" | "POST" | "/" | AWSStepFunctionsClientBuilder.standard()
+      | { c -> c.describeActivity(new DescribeActivityRequest().withActivityArn("activityArn")) }
+      | ["aws.stepfunctions.activity.arn": "activityArn"]
+      | ""
+    "SNS" | "Publish" | "POST" | "/" | AmazonSNSClientBuilder.standard()
+      | { c -> c.publish(new PublishRequest().withMessage("message").withTopicArn("topicArn")) }
+      | ["aws.sns.topic.arn": "topicArn"]
+      | """
+      <PublishResponse xmlns="https://sns.amazonaws.com/doc/2010-03-31/">
+          <PublishResult>
+              <MessageId>567910cd-659e-55d4-8ccb-5aaf14679dc0</MessageId>
+          </PublishResult>
+          <ResponseMetadata>
+              <RequestId>d74b8436-ae13-5ab4-a9ff-ce54dfea72a0</RequestId>
+          </ResponseMetadata>
+      </PublishResponse>
+      """
+    "AWSSecretsManager" | "CreateSecret" | "POST" | "/" | AWSSecretsManagerClientBuilder.standard()
+      | { c -> c.createSecret(new CreateSecretRequest().withName("secretName").withSecretString("secretValue")) }
+      | ["aws.secretsmanager.secret.arn": "arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3"]
+      | """
+      {
+        "ARN": "arn:aws:secretsmanager:us-west-2:123456789012:secret:MyTestDatabaseSecret-a1b2c3",
+        "Name":"MyTestDatabaseSecret",
+        "VersionId": "EXAMPLE1-90ab-cdef-fedc-ba987SECRET1"
+      }
+    """
+    "AWSLambda" | "GetEventSourceMapping" | "GET" | "/" | AWSLambdaClientBuilder.standard()
+      | { c -> c.getEventSourceMapping(new GetEventSourceMappingRequest().withUUID("uuid")) }
+      | ["aws.lambda.resource_mapping.id": "uuid"]
+      | ""
+    "AWSLambda" | "GetFunction" | "GET" | "/" | AWSLambdaClientBuilder.standard()
+      | { c-> c.getFunction(new GetFunctionRequest().withFunctionName("functionName")) }
+      | ["aws.lambda.function.name": "functionName"]
+      | ""
   }
 
   def "send #operation request to closed port"() {
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/javaagent/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-2.2/javaagent/build.gradle.kts
index 3b6efbd696..9f4487d727 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/javaagent/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/javaagent/build.gradle.kts
@@ -84,6 +84,9 @@ dependencies {
   testLibrary("software.amazon.awssdk:sqs:2.2.0")
   testLibrary("software.amazon.awssdk:sns:2.2.0")
   testLibrary("software.amazon.awssdk:ses:2.2.0")
+  testLibrary("software.amazon.awssdk:sfn:2.2.0")
+  testLibrary("software.amazon.awssdk:secretsmanager:2.2.0")
+  testLibrary("software.amazon.awssdk:lambda:2.2.0")
 }
 
 val latestDepTest = findProperty("testLatestDeps") as Boolean
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library-autoconfigure/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-2.2/library-autoconfigure/build.gradle.kts
index 6e0ea36a64..68b9c72b7d 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library-autoconfigure/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library-autoconfigure/build.gradle.kts
@@ -21,6 +21,9 @@ dependencies {
   testLibrary("software.amazon.awssdk:s3:2.2.0")
   testLibrary("software.amazon.awssdk:sqs:2.2.0")
   testLibrary("software.amazon.awssdk:sns:2.2.0")
+  testLibrary("software.amazon.awssdk:sfn:2.2.0")
+  testLibrary("software.amazon.awssdk:secretsmanager:2.2.0")
+  testLibrary("software.amazon.awssdk:lambda:2.2.0")
 }
 
 tasks {
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-2.2/library/build.gradle.kts
index 862df156ae..2ed33d6f03 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/build.gradle.kts
@@ -19,6 +19,9 @@ dependencies {
   testLibrary("software.amazon.awssdk:rds:2.2.0")
   testLibrary("software.amazon.awssdk:s3:2.2.0")
   testLibrary("software.amazon.awssdk:ses:2.2.0")
+  testLibrary("software.amazon.awssdk:sfn:2.2.0")
+  testLibrary("software.amazon.awssdk:secretsmanager:2.2.0")
+  testLibrary("software.amazon.awssdk:lambda:2.2.0")
 }
 
 testing {
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsExperimentalAttributes.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsExperimentalAttributes.java
new file mode 100644
index 0000000000..9e9f9cf59f
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsExperimentalAttributes.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v2_2;
+
+import static io.opentelemetry.api.common.AttributeKey.stringKey;
+
+import io.opentelemetry.api.common.AttributeKey;
+
+final class AwsExperimentalAttributes {
+  static final AttributeKey<String> AWS_BUCKET_NAME = stringKey("aws.bucket.name");
+  static final AttributeKey<String> AWS_QUEUE_URL = stringKey("aws.queue.url");
+  static final AttributeKey<String> AWS_QUEUE_NAME = stringKey("aws.queue.name");
+  static final AttributeKey<String> AWS_STREAM_NAME = stringKey("aws.stream.name");
+  static final AttributeKey<String> AWS_TABLE_NAME = stringKey("aws.table.name");
+  static final AttributeKey<String> AWS_GUARDRAIL_ID = stringKey("aws.bedrock.guardrail.id");
+  static final AttributeKey<String> AWS_GUARDRAIL_ARN = stringKey("aws.bedrock.guardrail.arn");
+  static final AttributeKey<String> AWS_AGENT_ID = stringKey("aws.bedrock.agent.id");
+  static final AttributeKey<String> AWS_DATA_SOURCE_ID = stringKey("aws.bedrock.data_source.id");
+  static final AttributeKey<String> AWS_KNOWLEDGE_BASE_ID =
+      stringKey("aws.bedrock.knowledge_base.id");
+
+  // TODO: Merge in gen_ai attributes in opentelemetry-semconv-incubating once upgrade to v1.26.0
+  static final AttributeKey<String> GEN_AI_MODEL = stringKey("gen_ai.request.model");
+  static final AttributeKey<String> GEN_AI_SYSTEM = stringKey("gen_ai.system");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_MAX_TOKENS =
+      stringKey("gen_ai.request.max_tokens");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_TEMPERATURE =
+      stringKey("gen_ai.request.temperature");
+
+  static final AttributeKey<String> GEN_AI_REQUEST_TOP_P = stringKey("gen_ai.request.top_p");
+
+  static final AttributeKey<String> GEN_AI_RESPONSE_FINISH_REASONS =
+      stringKey("gen_ai.response.finish_reasons");
+
+  static final AttributeKey<String> GEN_AI_USAGE_INPUT_TOKENS =
+      stringKey("gen_ai.usage.input_tokens");
+
+  static final AttributeKey<String> GEN_AI_USAGE_OUTPUT_TOKENS =
+      stringKey("gen_ai.usage.output_tokens");
+
+  static final AttributeKey<String> AWS_STATE_MACHINE_ARN =
+      stringKey("aws.stepfunctions.state_machine.arn");
+
+  static final AttributeKey<String> AWS_STEP_FUNCTIONS_ACTIVITY_ARN =
+      stringKey("aws.stepfunctions.activity.arn");
+
+  static final AttributeKey<String> AWS_SNS_TOPIC_ARN = stringKey("aws.sns.topic.arn");
+
+  static final AttributeKey<String> AWS_SECRET_ARN = stringKey("aws.secretsmanager.secret.arn");
+
+  static final AttributeKey<String> AWS_LAMBDA_NAME = stringKey("aws.lambda.function.name");
+
+  static final AttributeKey<String> AWS_LAMBDA_ARN = stringKey("aws.lambda.function.arn");
+
+  static final AttributeKey<String> AWS_LAMBDA_RESOURCE_ID =
+      stringKey("aws.lambda.resource_mapping.id");
+
+  static boolean isGenAiAttribute(String attributeKey) {
+    return attributeKey.equals(GEN_AI_REQUEST_MAX_TOKENS.getKey())
+        || attributeKey.equals(GEN_AI_REQUEST_TEMPERATURE.getKey())
+        || attributeKey.equals(GEN_AI_REQUEST_TOP_P.getKey())
+        || attributeKey.equals(GEN_AI_RESPONSE_FINISH_REASONS.getKey())
+        || attributeKey.equals(GEN_AI_USAGE_INPUT_TOKENS.getKey())
+        || attributeKey.equals(GEN_AI_USAGE_OUTPUT_TOKENS.getKey());
+  }
+
+  private AwsExperimentalAttributes() {}
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequest.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequest.java
index 54253d0f7b..2374bd4a52 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequest.java
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequest.java
@@ -5,10 +5,20 @@
 
 package io.opentelemetry.instrumentation.awssdk.v2_2;
 
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCK;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKAGENTOPERATION;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKAGENTRUNTIMEOPERATION;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKDATASOURCEOPERATION;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKKNOWLEDGEBASEOPERATION;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKRUNTIME;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.DYNAMODB;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.KINESIS;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.LAMBDA;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.S3;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.SECRETSMANAGER;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.SNS;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.SQS;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.STEPFUNCTION;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.FieldMapping.request;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.FieldMapping.response;
 
@@ -32,6 +42,54 @@ enum AwsSdkRequest {
   S3Request(S3, "S3Request"),
   SqsRequest(SQS, "SqsRequest"),
   KinesisRequest(KINESIS, "KinesisRequest"),
+
+  BedrockRequest(BEDROCK, "BedrockRequest"),
+  BedrockAgentRuntimeRequest(BEDROCKAGENTRUNTIMEOPERATION, "BedrockAgentRuntimeRequest"),
+  BedrockRuntimeRequest(BEDROCKRUNTIME, "BedrockRuntimeRequest"),
+  // BedrockAgent API based requests. We only support operations that are related to
+  // Agent/DataSources/KnowledgeBases
+  // resources and the request/response context contains the resource ID.
+  BedrockCreateAgentActionGroupRequest(BEDROCKAGENTOPERATION, "CreateAgentActionGroupRequest"),
+  BedrockCreateAgentAliasRequest(BEDROCKAGENTOPERATION, "CreateAgentAliasRequest"),
+  BedrockDeleteAgentActionGroupRequest(BEDROCKAGENTOPERATION, "DeleteAgentActionGroupRequest"),
+  BedrockDeleteAgentAliasRequest(BEDROCKAGENTOPERATION, "DeleteAgentAliasRequest"),
+  BedrockDeleteAgentVersionRequest(BEDROCKAGENTOPERATION, "DeleteAgentVersionRequest"),
+  BedrockGetAgentActionGroupRequest(BEDROCKAGENTOPERATION, "GetAgentActionGroupRequest"),
+  BedrockGetAgentAliasRequest(BEDROCKAGENTOPERATION, "GetAgentAliasRequest"),
+  BedrockGetAgentRequest(BEDROCKAGENTOPERATION, "GetAgentRequest"),
+  BedrockGetAgentVersionRequest(BEDROCKAGENTOPERATION, "GetAgentVersionRequest"),
+  BedrockListAgentActionGroupsRequest(BEDROCKAGENTOPERATION, "ListAgentActionGroupsRequest"),
+  BedrockListAgentAliasesRequest(BEDROCKAGENTOPERATION, "ListAgentAliasesRequest"),
+  BedrockListAgentKnowledgeBasesRequest(BEDROCKAGENTOPERATION, "ListAgentKnowledgeBasesRequest"),
+  BedrocListAgentVersionsRequest(BEDROCKAGENTOPERATION, "ListAgentVersionsRequest"),
+  BedrockPrepareAgentRequest(BEDROCKAGENTOPERATION, "PrepareAgentRequest"),
+  BedrockUpdateAgentActionGroupRequest(BEDROCKAGENTOPERATION, "UpdateAgentActionGroupRequest"),
+  BedrockUpdateAgentAliasRequest(BEDROCKAGENTOPERATION, "UpdateAgentAliasRequest"),
+  BedrockUpdateAgentRequest(BEDROCKAGENTOPERATION, "UpdateAgentRequest"),
+  BedrockBedrockAgentRequest(BEDROCKAGENTOPERATION, "BedrockAgentRequest"),
+  BedrockDeleteDataSourceRequest(BEDROCKDATASOURCEOPERATION, "DeleteDataSourceRequest"),
+  BedrockGetDataSourceRequest(BEDROCKDATASOURCEOPERATION, "GetDataSourceRequest"),
+  BedrockUpdateDataSourceRequest(BEDROCKDATASOURCEOPERATION, "UpdateDataSourceRequest"),
+  BedrocAssociateAgentKnowledgeBaseRequest(
+      BEDROCKKNOWLEDGEBASEOPERATION, "AssociateAgentKnowledgeBaseRequest"),
+  BedrockCreateDataSourceRequest(BEDROCKKNOWLEDGEBASEOPERATION, "CreateDataSourceRequest"),
+  BedrockDeleteKnowledgeBaseRequest(BEDROCKKNOWLEDGEBASEOPERATION, "DeleteKnowledgeBaseRequest"),
+  BedrockDisassociateAgentKnowledgeBaseRequest(
+      BEDROCKKNOWLEDGEBASEOPERATION, "DisassociateAgentKnowledgeBaseRequest"),
+  BedrockGetAgentKnowledgeBaseRequest(
+      BEDROCKKNOWLEDGEBASEOPERATION, "GetAgentKnowledgeBaseRequest"),
+  BedrockGetKnowledgeBaseRequest(BEDROCKKNOWLEDGEBASEOPERATION, "GetKnowledgeBaseRequest"),
+  BedrockListDataSourcesRequest(BEDROCKKNOWLEDGEBASEOPERATION, "ListDataSourcesRequest"),
+  BedrockUpdateAgentKnowledgeBaseRequest(
+      BEDROCKKNOWLEDGEBASEOPERATION, "UpdateAgentKnowledgeBaseRequest"),
+
+  SfnRequest(STEPFUNCTION, "SfnRequest"),
+
+  SnsRequest(SNS, "SnsRequest"),
+
+  SecretsManagerRequest(SECRETSMANAGER, "SecretsManagerRequest"),
+
+  LambdaRequest(LAMBDA, "LambdaRequest"),
   // specific requests
   BatchGetItem(
       DYNAMODB,
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequestType.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequestType.java
index 9062f2aa17..aa77d8d227 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequestType.java
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkRequestType.java
@@ -5,17 +5,84 @@
 
 package io.opentelemetry.instrumentation.awssdk.v2_2;
 
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_AGENT_ID;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_BUCKET_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_DATA_SOURCE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_GUARDRAIL_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_GUARDRAIL_ID;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_KNOWLEDGE_BASE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_LAMBDA_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_LAMBDA_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_LAMBDA_RESOURCE_ID;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_QUEUE_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_QUEUE_URL;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_SECRET_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_SNS_TOPIC_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_STATE_MACHINE_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_STEP_FUNCTIONS_ACTIVITY_ARN;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_STREAM_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.AWS_TABLE_NAME;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_MODEL;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_REQUEST_MAX_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_REQUEST_TEMPERATURE;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_REQUEST_TOP_P;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_RESPONSE_FINISH_REASONS;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_USAGE_INPUT_TOKENS;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_USAGE_OUTPUT_TOKENS;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.FieldMapping.request;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.FieldMapping.response;
 
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
 enum AwsSdkRequestType {
-  S3(request("aws.bucket.name", "Bucket")),
-  SQS(request("aws.queue.url", "QueueUrl"), request("aws.queue.name", "QueueName")),
-  KINESIS(request("aws.stream.name", "StreamName")),
-  DYNAMODB(request("aws.table.name", "TableName"));
+  S3(request(AWS_BUCKET_NAME.getKey(), "Bucket")),
+
+  SQS(request(AWS_QUEUE_URL.getKey(), "QueueUrl"), request(AWS_QUEUE_NAME.getKey(), "QueueName")),
+
+  KINESIS(request(AWS_STREAM_NAME.getKey(), "StreamName")),
+
+  DYNAMODB(request(AWS_TABLE_NAME.getKey(), "TableName")),
+
+  BEDROCK(
+      request(AWS_GUARDRAIL_ID.getKey(), "guardrailIdentifier"),
+      response(AWS_GUARDRAIL_ARN.getKey(), "guardrailArn")),
+  BEDROCKAGENTOPERATION(
+      request(AWS_AGENT_ID.getKey(), "agentId"), response(AWS_AGENT_ID.getKey(), "agentId")),
+  BEDROCKAGENTRUNTIMEOPERATION(
+      request(AWS_AGENT_ID.getKey(), "agentId"),
+      response(AWS_AGENT_ID.getKey(), "agentId"),
+      request(AWS_KNOWLEDGE_BASE_ID.getKey(), "knowledgeBaseId"),
+      response(AWS_KNOWLEDGE_BASE_ID.getKey(), "knowledgeBaseId")),
+  BEDROCKDATASOURCEOPERATION(
+      request(AWS_DATA_SOURCE_ID.getKey(), "dataSourceId"),
+      response(AWS_DATA_SOURCE_ID.getKey(), "dataSourceId")),
+  BEDROCKKNOWLEDGEBASEOPERATION(
+      request(AWS_KNOWLEDGE_BASE_ID.getKey(), "knowledgeBaseId"),
+      response(AWS_KNOWLEDGE_BASE_ID.getKey(), "knowledgeBaseId")),
+  BEDROCKRUNTIME(
+      request(GEN_AI_MODEL.getKey(), "modelId"),
+      request(GEN_AI_REQUEST_MAX_TOKENS.getKey(), "body"),
+      request(GEN_AI_REQUEST_TEMPERATURE.getKey(), "body"),
+      request(GEN_AI_REQUEST_TOP_P.getKey(), "body"),
+      request(GEN_AI_USAGE_INPUT_TOKENS.getKey(), "body"),
+      response(GEN_AI_RESPONSE_FINISH_REASONS.getKey(), "body"),
+      response(GEN_AI_USAGE_INPUT_TOKENS.getKey(), "body"),
+      response(GEN_AI_USAGE_OUTPUT_TOKENS.getKey(), "body")),
+
+  STEPFUNCTION(
+      request(AWS_STATE_MACHINE_ARN.getKey(), "stateMachineArn"),
+      request(AWS_STEP_FUNCTIONS_ACTIVITY_ARN.getKey(), "activityArn")),
+
+  SNS(request(AWS_SNS_TOPIC_ARN.getKey(), "TopicArn")),
+
+  SECRETSMANAGER(response(AWS_SECRET_ARN.getKey(), "ARN")),
+
+  LAMBDA(
+      request(AWS_LAMBDA_NAME.getKey(), "FunctionName"),
+      request(AWS_LAMBDA_RESOURCE_ID.getKey(), "UUID"),
+      response(AWS_LAMBDA_ARN.getKey(), "Configuration.FunctionArn"));
 
   // Wrapping in unmodifiableMap
   @SuppressWarnings("ImmutableEnumChecker")
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParser.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParser.java
new file mode 100644
index 0000000000..bf14047fb0
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParser.java
@@ -0,0 +1,267 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v2_2;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class BedrockJsonParser {
+
+  // Prevent instantiation
+  private BedrockJsonParser() {
+    throw new UnsupportedOperationException("Utility class");
+  }
+
+  public static LlmJson parse(String jsonString) {
+    JsonParser parser = new JsonParser(jsonString);
+    Map<String, Object> jsonBody = parser.parse();
+    return new LlmJson(jsonBody);
+  }
+
+  static class JsonParser {
+    private final String json;
+    private int position;
+
+    public JsonParser(String json) {
+      this.json = json.trim();
+      this.position = 0;
+    }
+
+    private void skipWhitespace() {
+      while (position < json.length() && Character.isWhitespace(json.charAt(position))) {
+        position++;
+      }
+    }
+
+    private char currentChar() {
+      return json.charAt(position);
+    }
+
+    private static boolean isHexDigit(char c) {
+      return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+    }
+
+    private void expect(char c) {
+      skipWhitespace();
+      if (currentChar() != c) {
+        throw new IllegalArgumentException(
+            "Expected '" + c + "' but found '" + currentChar() + "'");
+      }
+      position++;
+    }
+
+    private String readString() {
+      skipWhitespace();
+      expect('"'); // Ensure the string starts with a quote
+      StringBuilder result = new StringBuilder();
+      while (currentChar() != '"') {
+        // Handle escape sequences
+        if (currentChar() == '\\') {
+          position++; // Move past the backslash
+          if (position >= json.length()) {
+            throw new IllegalArgumentException("Unexpected end of input in string escape sequence");
+          }
+          char escapeChar = currentChar();
+          switch (escapeChar) {
+            case '"':
+            case '\\':
+            case '/':
+              result.append(escapeChar);
+              break;
+            case 'b':
+              result.append('\b');
+              break;
+            case 'f':
+              result.append('\f');
+              break;
+            case 'n':
+              result.append('\n');
+              break;
+            case 'r':
+              result.append('\r');
+              break;
+            case 't':
+              result.append('\t');
+              break;
+            case 'u': // Unicode escape sequence
+              if (position + 4 >= json.length()) {
+                throw new IllegalArgumentException("Invalid unicode escape sequence in string");
+              }
+              char[] hexChars = new char[4];
+              for (int i = 0; i < 4; i++) {
+                position++; // Move to the next character
+                char hexChar = json.charAt(position);
+                if (!isHexDigit(hexChar)) {
+                  throw new IllegalArgumentException(
+                      "Invalid hexadecimal digit in unicode escape sequence");
+                }
+                hexChars[i] = hexChar;
+              }
+              int unicodeValue = Integer.parseInt(new String(hexChars), 16);
+              result.append((char) unicodeValue);
+              break;
+            default:
+              throw new IllegalArgumentException("Invalid escape character: \\" + escapeChar);
+          }
+          position++;
+        } else {
+          result.append(currentChar());
+          position++;
+        }
+      }
+      position++; // Skip closing quote
+      return result.toString();
+    }
+
+    private Object readValue() {
+      skipWhitespace();
+      char c = currentChar();
+
+      if (c == '"') {
+        return readString();
+      } else if (Character.isDigit(c)) {
+        return readScopedNumber();
+      } else if (c == '{') {
+        return readObject(); // JSON Objects
+      } else if (c == '[') {
+        return readArray(); // JSON Arrays
+      } else if (json.startsWith("true", position)) {
+        position += 4;
+        return true;
+      } else if (json.startsWith("false", position)) {
+        position += 5;
+        return false;
+      } else if (json.startsWith("null", position)) {
+        position += 4;
+        return null; // JSON null
+      } else {
+        throw new IllegalArgumentException("Unexpected character: " + c);
+      }
+    }
+
+    private Number readScopedNumber() {
+      int start = position;
+
+      // Consume digits and the optional decimal point
+      while (position < json.length()
+          && (Character.isDigit(json.charAt(position)) || json.charAt(position) == '.')) {
+        position++;
+      }
+
+      String number = json.substring(start, position);
+
+      if (number.contains(".")) {
+        double value = Double.parseDouble(number);
+        if (value < 0.0 || value > 1.0) {
+          throw new IllegalArgumentException(
+              "Value out of bounds for Bedrock Floating Point Attribute: " + number);
+        }
+        return value;
+      } else {
+        return Integer.parseInt(number);
+      }
+    }
+
+    private Map<String, Object> readObject() {
+      Map<String, Object> map = new HashMap<>();
+      expect('{');
+      skipWhitespace();
+      while (currentChar() != '}') {
+        String key = readString();
+        expect(':');
+        Object value = readValue();
+        map.put(key, value);
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++; // Skip closing brace
+      return map;
+    }
+
+    private List<Object> readArray() {
+      List<Object> list = new ArrayList<>();
+      expect('[');
+      skipWhitespace();
+      while (currentChar() != ']') {
+        list.add(readValue());
+        skipWhitespace();
+        if (currentChar() == ',') {
+          position++;
+        }
+      }
+      position++;
+      return list;
+    }
+
+    public Map<String, Object> parse() {
+      return readObject();
+    }
+  }
+
+  // Resolves paths in a JSON structure
+  static class JsonPathResolver {
+
+    // Private constructor to prevent instantiation
+    private JsonPathResolver() {
+      throw new UnsupportedOperationException("Utility class");
+    }
+
+    public static Object resolvePath(LlmJson llmJson, String... paths) {
+      for (String path : paths) {
+        Object value = resolvePath(llmJson.getJsonBody(), path);
+        if (value != null) {
+          return value;
+        }
+      }
+      return null;
+    }
+
+    private static Object resolvePath(Map<String, Object> json, String path) {
+      String[] keys = path.split("/");
+      Object current = json;
+
+      for (String key : keys) {
+        if (key.isEmpty()) {
+          continue;
+        }
+
+        if (current instanceof Map) {
+          current = ((Map<?, ?>) current).get(key);
+        } else if (current instanceof List) {
+          try {
+            int index = Integer.parseInt(key);
+            current = ((List<?>) current).get(index);
+          } catch (NumberFormatException | IndexOutOfBoundsException e) {
+            return null;
+          }
+        } else {
+          return null;
+        }
+
+        if (current == null) {
+          return null;
+        }
+      }
+      return current;
+    }
+  }
+
+  public static class LlmJson {
+    private final Map<String, Object> jsonBody;
+
+    public LlmJson(Map<String, Object> jsonBody) {
+      this.jsonBody = jsonBody;
+    }
+
+    public Map<String, Object> getJsonBody() {
+      return jsonBody;
+    }
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/FieldMapper.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/FieldMapper.java
index 569d0eb5ae..8f2d463237 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/FieldMapper.java
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/FieldMapper.java
@@ -65,8 +65,13 @@ class FieldMapper {
     for (int i = 1; i < path.size() && target != null; i++) {
       target = next(target, path.get(i));
     }
+    String value;
     if (target != null) {
-      String value = serializer.serialize(target);
+      if (AwsExperimentalAttributes.isGenAiAttribute(fieldMapping.getAttribute())) {
+        value = serializer.serialize(fieldMapping.getAttribute(), target);
+      } else {
+        value = serializer.serialize(target);
+      }
       if (!StringUtils.isEmpty(value)) {
         span.setAttribute(fieldMapping.getAttribute(), value);
       }
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/Serializer.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/Serializer.java
index 979ecb08e8..1d2c7a5386 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/Serializer.java
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/Serializer.java
@@ -7,11 +7,14 @@ package io.opentelemetry.instrumentation.awssdk.v2_2;
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import software.amazon.awssdk.core.SdkBytes;
 import software.amazon.awssdk.core.SdkPojo;
 import software.amazon.awssdk.http.ContentStreamProvider;
 import software.amazon.awssdk.http.SdkHttpFullRequest;
@@ -41,6 +44,45 @@ class Serializer {
     return target.toString();
   }
 
+  @Nullable
+  String serialize(String attributeName, Object target) {
+    try {
+      // Extract JSON string from target if it is a Bedrock Runtime JSON blob
+      String jsonString;
+      if (target instanceof SdkBytes) {
+        jsonString = ((SdkBytes) target).asUtf8String();
+      } else {
+        if (target != null) {
+          return target.toString();
+        }
+        return null;
+      }
+
+      // Parse the LLM JSON string into a Map
+      BedrockJsonParser.LlmJson llmJson = BedrockJsonParser.parse(jsonString);
+
+      // Use attribute name to extract the corresponding value
+      switch (attributeName) {
+        case "gen_ai.request.max_tokens":
+          return getMaxTokens(llmJson);
+        case "gen_ai.request.temperature":
+          return getTemperature(llmJson);
+        case "gen_ai.request.top_p":
+          return getTopP(llmJson);
+        case "gen_ai.response.finish_reasons":
+          return getFinishReasons(llmJson);
+        case "gen_ai.usage.input_tokens":
+          return getInputTokens(llmJson);
+        case "gen_ai.usage.output_tokens":
+          return getOutputTokens(llmJson);
+        default:
+          return null;
+      }
+    } catch (RuntimeException e) {
+      return null;
+    }
+  }
+
   @Nullable
   private static String serialize(SdkPojo sdkPojo) {
     ProtocolMarshaller<SdkHttpFullRequest> marshaller =
@@ -65,4 +107,167 @@ class Serializer {
     String serialized = collection.stream().map(this::serialize).collect(Collectors.joining(","));
     return (StringUtils.isEmpty(serialized) ? null : "[" + serialized + "]");
   }
+
+  @Nullable
+  private static String approximateTokenCount(
+      BedrockJsonParser.LlmJson jsonBody, String... textPaths) {
+    return Arrays.stream(textPaths)
+        .map(
+            path -> {
+              Object value = BedrockJsonParser.JsonPathResolver.resolvePath(jsonBody, path);
+              if (value instanceof String) {
+                int tokenEstimate = (int) Math.ceil(((String) value).length() / 6.0);
+                return Integer.toString(tokenEstimate);
+              }
+              return null;
+            })
+        .filter(Objects::nonNull)
+        .findFirst()
+        .orElse(null);
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/max_new_tokens"
+  // Amazon Titan -> "/textGenerationConfig/maxTokenCount"
+  // Anthropic Claude -> "/max_tokens"
+  // Cohere Command -> "/max_tokens"
+  // Cohere Command R -> "/max_tokens"
+  // AI21 Jamba -> "/max_tokens"
+  // Meta Llama -> "/max_gen_len"
+  // Mistral AI -> "/max_tokens"
+  @Nullable
+  private static String getMaxTokens(BedrockJsonParser.LlmJson jsonBody) {
+    Object value =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody,
+            "/max_tokens",
+            "/max_gen_len",
+            "/textGenerationConfig/maxTokenCount",
+            "inferenceConfig/max_new_tokens");
+    return value != null ? String.valueOf(value) : null;
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/temperature"
+  // Amazon Titan -> "/textGenerationConfig/temperature"
+  // Anthropic Claude -> "/temperature"
+  // Cohere Command -> "/temperature"
+  // Cohere Command R -> "/temperature"
+  // AI21 Jamba -> "/temperature"
+  // Meta Llama -> "/temperature"
+  // Mistral AI -> "/temperature"
+  @Nullable
+  private static String getTemperature(BedrockJsonParser.LlmJson jsonBody) {
+    Object value =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody,
+            "/temperature",
+            "/textGenerationConfig/temperature",
+            "/inferenceConfig/temperature");
+    return value != null ? String.valueOf(value) : null;
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/inferenceConfig/top_p"
+  // Amazon Titan -> "/textGenerationConfig/topP"
+  // Anthropic Claude -> "/top_p"
+  // Cohere Command -> "/p"
+  // Cohere Command R -> "/p"
+  // AI21 Jamba -> "/top_p"
+  // Meta Llama -> "/top_p"
+  // Mistral AI -> "/top_p"
+  @Nullable
+  private static String getTopP(BedrockJsonParser.LlmJson jsonBody) {
+    Object value =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody, "/top_p", "/p", "/textGenerationConfig/topP", "/inferenceConfig/top_p");
+    return value != null ? String.valueOf(value) : null;
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/stopReason"
+  // Amazon Titan -> "/results/0/completionReason"
+  // Anthropic Claude -> "/stop_reason"
+  // Cohere Command -> "/generations/0/finish_reason"
+  // Cohere Command R -> "/finish_reason"
+  // AI21 Jamba -> "/choices/0/finish_reason"
+  // Meta Llama -> "/stop_reason"
+  // Mistral AI -> "/outputs/0/stop_reason"
+  @Nullable
+  private static String getFinishReasons(BedrockJsonParser.LlmJson jsonBody) {
+    Object value =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody,
+            "/stopReason",
+            "/finish_reason",
+            "/stop_reason",
+            "/results/0/completionReason",
+            "/generations/0/finish_reason",
+            "/choices/0/finish_reason",
+            "/outputs/0/stop_reason");
+
+    return value != null ? "[" + value + "]" : null;
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/inputTokens"
+  // Amazon Titan -> "/inputTextTokenCount"
+  // Anthropic Claude -> "/usage/input_tokens"
+  // Cohere Command -> "/prompt"
+  // Cohere Command R -> "/message"
+  // AI21 Jamba -> "/usage/prompt_tokens"
+  // Meta Llama -> "/prompt_token_count"
+  // Mistral AI -> "/prompt"
+  @Nullable
+  private static String getInputTokens(BedrockJsonParser.LlmJson jsonBody) {
+    // Try direct tokens counts first
+    Object directCount =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody,
+            "/inputTextTokenCount",
+            "/prompt_token_count",
+            "/usage/input_tokens",
+            "/usage/prompt_tokens",
+            "/usage/inputTokens");
+
+    if (directCount != null) {
+      return String.valueOf(directCount);
+    }
+
+    // Fall back to token approximation
+    Object approxTokenCount = approximateTokenCount(jsonBody, "/prompt", "/message");
+
+    return approxTokenCount != null ? String.valueOf(approxTokenCount) : null;
+  }
+
+  // Model -> Path Mapping:
+  // Amazon Nova -> "/usage/outputTokens"
+  // Amazon Titan -> "/results/0/tokenCount"
+  // Anthropic Claude -> "/usage/output_tokens"
+  // Cohere Command -> "/generations/0/text"
+  // Cohere Command R -> "/text"
+  // AI21 Jamba -> "/usage/completion_tokens"
+  // Meta Llama -> "/generation_token_count"
+  // Mistral AI -> "/outputs/0/text"
+  @Nullable
+  private static String getOutputTokens(BedrockJsonParser.LlmJson jsonBody) {
+    // Try direct token counts first
+    Object directCount =
+        BedrockJsonParser.JsonPathResolver.resolvePath(
+            jsonBody,
+            "/generation_token_count",
+            "/results/0/tokenCount",
+            "/usage/output_tokens",
+            "/usage/completion_tokens",
+            "/usage/outputTokens");
+
+    if (directCount != null) {
+      return String.valueOf(directCount);
+    }
+
+    // Fall back to token approximation
+    Object approxTokenCount = approximateTokenCount(jsonBody, "/text", "/outputs/0/text");
+
+    return approxTokenCount != null ? String.valueOf(approxTokenCount) : null;
+  }
 }
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java
index f717b1efc4..5721dbdfa5 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java
@@ -5,6 +5,8 @@
 
 package io.opentelemetry.instrumentation.awssdk.v2_2;
 
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsExperimentalAttributes.GEN_AI_SYSTEM;
+import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.BEDROCKRUNTIME;
 import static io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkRequestType.DYNAMODB;
 
 import io.opentelemetry.api.common.AttributeKey;
@@ -42,6 +44,7 @@ import software.amazon.awssdk.http.SdkHttpResponse;
 
 /** AWS request execution interceptor. */
 final class TracingExecutionInterceptor implements ExecutionInterceptor {
+  private static final String GEN_AI_SYSTEM_BEDROCK = "aws.bedrock";
 
   // the class name is part of the attribute name, so that it will be shaded when used in javaagent
   // instrumentation, and won't conflict with usage outside javaagent instrumentation
@@ -317,6 +320,10 @@ final class TracingExecutionInterceptor implements ExecutionInterceptor {
         span.setAttribute(SemanticAttributes.DB_OPERATION, operation);
       }
     }
+
+    if (awsSdkRequest.type() == BEDROCKRUNTIME) {
+      span.setAttribute(GEN_AI_SYSTEM, GEN_AI_SYSTEM_BEDROCK);
+    }
   }
 
   @Override
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParserTest.groovy b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParserTest.groovy
new file mode 100644
index 0000000000..82f3622785
--- /dev/null
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/library/src/test/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/BedrockJsonParserTest.groovy
@@ -0,0 +1,107 @@
+/*
+ * Copyright The OpenTelemetry Authors
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package io.opentelemetry.instrumentation.awssdk.v2_2
+
+import spock.lang.Specification
+
+class BedrockJsonParserTest extends Specification {
+  def "should parse simple JSON object"() {
+    given:
+    String json = '{"key":"value"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody() == [key: "value"]
+  }
+
+  def "should parse nested JSON object"() {
+    given:
+    String json = '{"parent":{"child":"value"}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def parent = parsedJson.getJsonBody().get("parent")
+    parent instanceof Map
+    parent["child"] == "value"
+  }
+
+  def "should parse JSON array"() {
+    given:
+    String json = '{"array":[1, "two", 1.0]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    def array = parsedJson.getJsonBody().get("array")
+    array instanceof List
+    array == [1, "two", 1.0]
+  }
+
+  def "should parse escape sequences"() {
+    given:
+    String json = '{"escaped":"Line1\\nLine2\\tTabbed\\\"Quoted\\\"\\bBackspace\\fFormfeed\\rCarriageReturn\\\\Backslash\\/Slash\\u0041"}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+
+    then:
+    parsedJson.getJsonBody().get("escaped") ==
+        "Line1\nLine2\tTabbed\"Quoted\"\bBackspace\fFormfeed\rCarriageReturn\\Backslash/SlashA"
+  }
+
+  def "should throw exception for malformed JSON"() {
+    given:
+    String malformedJson = '{"key":value}'
+
+    when:
+    BedrockJsonParser.parse(malformedJson)
+
+    then:
+    def ex = thrown(IllegalArgumentException)
+    ex.message.contains("Unexpected character")
+  }
+
+  def "should resolve path in JSON object"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/parent/child/key")
+
+    then:
+    resolvedValue == "value"
+  }
+
+  def "should resolve path in JSON array"() {
+    given:
+    String json = '{"array":[{"key":"value1"}, {"key":"value2"}]}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/array/1/key")
+
+    then:
+    resolvedValue == "value2"
+  }
+
+  def "should return null for invalid path resolution"() {
+    given:
+    String json = '{"parent":{"child":{"key":"value"}}}'
+
+    when:
+    def parsedJson = BedrockJsonParser.parse(json)
+    def resolvedValue = BedrockJsonParser.JsonPathResolver.resolvePath(parsedJson, "/invalid/path")
+
+    then:
+    resolvedValue == null
+  }
+}
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/testing/build.gradle.kts b/instrumentation/aws-sdk/aws-sdk-2.2/testing/build.gradle.kts
index 9981aa9a19..1caed55e62 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/testing/build.gradle.kts
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/testing/build.gradle.kts
@@ -19,6 +19,9 @@ dependencies {
   compileOnly("software.amazon.awssdk:sqs:2.2.0")
   compileOnly("software.amazon.awssdk:sns:2.2.0")
   compileOnly("software.amazon.awssdk:ses:2.2.0")
+  compileOnly("software.amazon.awssdk:sfn:2.2.0")
+  compileOnly("software.amazon.awssdk:lambda:2.2.0")
+  compileOnly("software.amazon.awssdk:secretsmanager:2.2.0")
 
   // needed for SQS - using emq directly as localstack references emq v0.15.7 ie WITHOUT AWS trace header propagation
   implementation("org.elasticmq:elasticmq-rest-sqs_2.13:1.5.1")
diff --git a/instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy b/instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy
index 7c152bb91b..4fa7a220be 100644
--- a/instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy
+++ b/instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy
@@ -35,6 +35,16 @@ import software.amazon.awssdk.services.sqs.SqsAsyncClient
 import software.amazon.awssdk.services.sqs.SqsClient
 import software.amazon.awssdk.services.sqs.model.CreateQueueRequest
 import software.amazon.awssdk.services.sqs.model.SendMessageRequest
+import software.amazon.awssdk.services.sfn.SfnClient
+import software.amazon.awssdk.services.sfn.model.DescribeStateMachineRequest
+import software.amazon.awssdk.services.sfn.model.DescribeActivityRequest
+import software.amazon.awssdk.services.lambda.LambdaClient
+import software.amazon.awssdk.services.lambda.model.GetFunctionRequest
+import software.amazon.awssdk.services.lambda.model.GetEventSourceMappingRequest
+import software.amazon.awssdk.services.sns.SnsClient
+import software.amazon.awssdk.services.sns.model.PublishRequest
+import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient
+import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest
 import spock.lang.Unroll
 
 import java.nio.charset.StandardCharsets
@@ -144,6 +154,29 @@ abstract class AbstractAws2ClientTest extends AbstractAws2ClientCoreTest {
               "$SemanticAttributes.MESSAGING_SYSTEM" "AmazonSQS"
             } else if (service == "Kinesis") {
               "aws.stream.name" "somestream"
+            } else if (service == "Bedrock" && operation == "GetGuardrail") {
+              "aws.bedrock.guardrail.id" "guardrailId"
+            } else if (service == "BedrockAgent" && operation == "GetAgent") {
+              "aws.bedrock.agent.id" "agentId"
+            } else if (service == "BedrockAgent" && operation == "GetKnowledgeBase") {
+              "aws.bedrock.knowledge_base.id" "knowledgeBaseId"
+            } else if (service == "BedrockAgent" && operation == "GetDataSource") {
+              "aws.bedrock.data_source.id" "datasourceId"
+            } else if (service == "BedrockRuntime" && operation == "InvokeModel") {
+              "gen_ai.request.model" "meta.llama2-13b-chat-v1"
+              "gen_ai.system" "aws.bedrock"
+            } else if (service == "Sfn" && operation == "DescribeStateMachine") {
+              "aws.stepfunctions.state_machine.arn" "stateMachineArn"
+            } else if (service == "Sfn" && operation == "DescribeActivity") {
+              "aws.stepfunctions.activity.arn" "activityArn"
+            } else if (service == "Lambda" && operation == "GetFunction") {
+              "aws.lambda.function.name" "functionName"
+            } else if (service == "Lambda" && operation == "GetEventSourceMapping") {
+              "aws.lambda.resource_mapping.id" "sourceEventId"
+            } else if (service == "Sns") {
+              "aws.sns.topic.arn" "topicArn"
+            } else if (service == "SecretsManager") {
+              "aws.secretsmanager.secret.arn" "someSecretArn"
             }
           }
         }
@@ -218,6 +251,41 @@ abstract class AbstractAws2ClientTest extends AbstractAws2ClientCoreTest {
           <ResponseMetadata><RequestId>0ac9cda2-bbf4-11d3-f92b-31fa5e8dbc99</RequestId></ResponseMetadata>
         </DeleteOptionGroupResponse>
         """
+    "Sfn" | "DescribeStateMachine" | "POST" | "UNKNOWN" | SfnClient.builder()
+      | { c -> c.describeStateMachine(DescribeStateMachineRequest.builder().stateMachineArn("stateMachineArn").build()) }
+      | ""
+    "Sfn" | "DescribeActivity" | "POST" | "UNKNOWN" | SfnClient.builder()
+      | { c -> c.describeActivity(DescribeActivityRequest.builder().activityArn("activityArn").build()) }
+      | ""
+    "Lambda" | "GetFunction" | "GET" | "UNKNOWN" | LambdaClient.builder()
+      | { c -> c.getFunction(GetFunctionRequest.builder().functionName("functionName").build()) }
+      | ""
+    "Lambda" | "GetEventSourceMapping" | "GET" |"UNKNOWN" | LambdaClient.builder()
+      | { c -> c.getEventSourceMapping(GetEventSourceMappingRequest.builder().uuid("sourceEventId").build()) }
+      | ""
+    "Sns" | "Publish" | "POST" | "d74b8436-ae13-5ab4-a9ff-ce54dfea72a0" | SnsClient.builder()
+      | { c -> c.publish(PublishRequest.builder().topicArn("topicArn").message("message").build()) }
+      | """
+      <PublishResponse xmlns="https://sns.amazonaws.com/doc/2010-03-31/">
+          <PublishResult>
+              <MessageId>567910cd-659e-55d4-8ccb-5aaf14679dc0</MessageId>
+          </PublishResult>
+          <ResponseMetadata>
+              <RequestId>d74b8436-ae13-5ab4-a9ff-ce54dfea72a0</RequestId>
+          </ResponseMetadata>
+      </PublishResponse>
+    """
+    "SecretsManager" | "GetSecretValue" | "POST" | "UNKNOWN" | SecretsManagerClient.builder()
+      | { c -> c.getSecretValue(GetSecretValueRequest.builder().secretId("someSecret1").build()) }
+      | """
+      {
+        "ARN":"someSecretArn",
+        "CreatedDate":1.523477145713E9,
+        "Name":"MyTestDatabaseSecret",
+        "SecretString":"{\\n  \\"username\\":\\"david\\",\\n  \\"password\\":\\"EXAMPLE-PASSWORD\\"\\n}\\n",
+        "VersionId":"EXAMPLE1-90ab-cdef-fedc-ba987SECRET1"
+      }
+    """
   }
 
   def "send #operation async request with builder #builder.class.getName() mocked response"() {
diff --git a/instrumentation/jmx-metrics/javaagent/src/main/java/io/opentelemetry/instrumentation/javaagent/jmx/JmxMetricInsightInstaller.java b/instrumentation/jmx-metrics/javaagent/src/main/java/io/opentelemetry/instrumentation/javaagent/jmx/JmxMetricInsightInstaller.java
index 69b3c09c90..74a6f75ffb 100644
--- a/instrumentation/jmx-metrics/javaagent/src/main/java/io/opentelemetry/instrumentation/javaagent/jmx/JmxMetricInsightInstaller.java
+++ b/instrumentation/jmx-metrics/javaagent/src/main/java/io/opentelemetry/instrumentation/javaagent/jmx/JmxMetricInsightInstaller.java
@@ -20,6 +20,7 @@ import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.time.Duration;
 import java.util.List;
 
 /** An {@link AgentListener} that enables JMX metrics during agent startup. */
@@ -32,22 +33,22 @@ public class JmxMetricInsightInstaller implements AgentListener {
 
     if (config.getBoolean("otel.jmx.enabled", true)) {
       JmxMetricInsight service =
-          JmxMetricInsight.createService(GlobalOpenTelemetry.get(), beanDiscoveryDelay(config));
+          JmxMetricInsight.createService(
+              GlobalOpenTelemetry.get(), beanDiscoveryDelay(config).toMillis());
       MetricConfiguration conf = buildMetricConfiguration(config);
       service.start(conf);
     }
   }
 
-  private static long beanDiscoveryDelay(ConfigProperties configProperties) {
-    Long discoveryDelay = configProperties.getLong("otel.jmx.discovery.delay");
+  private static Duration beanDiscoveryDelay(ConfigProperties configProperties) {
+    Duration discoveryDelay = configProperties.getDuration("otel.jmx.discovery.delay");
     if (discoveryDelay != null) {
       return discoveryDelay;
     }
 
     // If discovery delay has not been configured, have a peek at the metric export interval.
     // It makes sense for both of these values to be similar.
-    long exportInterval = configProperties.getLong("otel.metric.export.interval", 60000);
-    return exportInterval;
+    return configProperties.getDuration("otel.metric.export.interval", Duration.ofMinutes(1));
   }
 
   private static String resourceFor(String platform) {
diff --git a/instrumentation/jmx-metrics/library/src/main/java/io/opentelemetry/instrumentation/jmx/engine/BeanFinder.java b/instrumentation/jmx-metrics/library/src/main/java/io/opentelemetry/instrumentation/jmx/engine/BeanFinder.java
index 8b0fd636be..b9856f1dc9 100644
--- a/instrumentation/jmx-metrics/library/src/main/java/io/opentelemetry/instrumentation/jmx/engine/BeanFinder.java
+++ b/instrumentation/jmx-metrics/library/src/main/java/io/opentelemetry/instrumentation/jmx/engine/BeanFinder.java
@@ -25,7 +25,13 @@ class BeanFinder {
 
   private final MetricRegistrar registrar;
   private MetricConfiguration conf;
-  private final ScheduledExecutorService exec = Executors.newSingleThreadScheduledExecutor();
+  private final ScheduledExecutorService exec =
+      Executors.newSingleThreadScheduledExecutor(
+          runnable -> {
+            Thread result = new Thread(runnable, "jmx_bean_finder");
+            result.setDaemon(true);
+            return result;
+          });
   private final long discoveryDelay;
   private final long maxDelay;
   private long delay = 1000; // number of milliseconds until first attempt to discover MBeans
@@ -39,12 +45,18 @@ class BeanFinder {
   void discoverBeans(MetricConfiguration conf) {
     this.conf = conf;
 
-    if (!conf.isEmpty()) {
-      // Issue 9336: Corner case: PlatformMBeanServer will remain unitialized until a direct
-      // reference to it is made. This call makes sure that the PlatformMBeanServer will be in
-      // the set of MBeanServers reported by MBeanServerFactory.
-      ManagementFactory.getPlatformMBeanServer();
-    }
+    exec.schedule(
+        () -> {
+          // Issue 9336: Corner case: PlatformMBeanServer will remain unitialized until a direct
+          // reference to it is made. This call makes sure that the PlatformMBeanServer will be in
+          // the set of MBeanServers reported by MBeanServerFactory.
+          // Issue 11143: This call initializes java.util.logging.LogManager. We should not call it
+          // before application has had a chance to configure custom log manager. This is needed for
+          // wildfly.
+          ManagementFactory.getPlatformMBeanServer();
+        },
+        discoveryDelay,
+        TimeUnit.MILLISECONDS);
 
     exec.schedule(
         new Runnable() {
diff --git a/version.gradle.kts b/version.gradle.kts
index 5217d396e2..66cc8ecb2a 100644
--- a/version.gradle.kts
+++ b/version.gradle.kts
@@ -1,5 +1,5 @@
-val stableVersion = "1.33.6"
-val alphaVersion = "1.33.6-alpha"
+val stableVersion = "1.33.6-adot1"
+val alphaVersion = "1.33.6-adot1-alpha"
 
 allprojects {
   if (findProperty("otel.stable") != "true") {
