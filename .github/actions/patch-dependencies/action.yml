name: "Patch dependencies"
description: |
  Patches direct dependencies of this project leveraging maven local to publish the results.

  This workflow supports patching opentelemetry-java and opentelemetry-java-contrib repositories by executing
  the `patch.sh` script that will try to patch those repositories and after that will optionally test and then publish
  the artifacts to maven local.
  To add a patch you have to add a file in the `.github/patches/` directory with the name of the repository that must
  be patched.
  This action assumes that java was set correctly.
inputs:
  run_tests:
    default: "false"
    required: false
    description: "If the workflow should run tests of the dependencies. Anything different than false will evaluate to true"
  gpg_private_key:
    description: "The gpg key used to sign the artifacts"
    required: false
  gpg_password:
    description: "The gpg key password"
    required: false
runs:
  using: "composite"
  steps:
    - name: set environment variables
      env:
        INPUT_KEY: ${{ inputs.gpg_private_key }}
        INPUT_PASSWORD: ${{ inputs.gpg_password }}
      shell: bash
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        if [[ ! -z "$INPUT_KEY" ]]; then
          {
            echo "GPG_PRIVATE_KEY<<$EOF"
            echo "$INPUT_KEY"
            echo "$EOF"
          } >> "$GITHUB_ENV"
        fi
        if [[ ! -z "$INPUT_PASSWORD" ]]; then
          {
            echo "GPG_PASSWORD<<$EOF"
            echo "$INPUT_PASSWORD"
            echo "$EOF"
          } >> "$GITHUB_ENV"
        fi

    - name: check patches
      run: |
        echo "=== CHECKING FOR PATCH FILES ==="
        ls -la .github/patches/ || echo "No patches directory found"
        
        if [[ -f .github/patches/opentelemetry-java.patch ]]; then
          echo 'patch_otel_java=true' >> $GITHUB_ENV
          echo "Found opentelemetry-java.patch"
          wc -l .github/patches/opentelemetry-java.patch
        else
          echo "No opentelemetry-java.patch found"
        fi
        
        if [[ -f .github/patches/opentelemetry-java-instrumentation.patch ]]; then
            echo 'patch_otel_java_instrumentation=true' >> $GITHUB_ENV
            echo "Found opentelemetry-java-instrumentation.patch"
            wc -l .github/patches/opentelemetry-java-instrumentation.patch
        else
            echo "No opentelemetry-java-instrumentation.patch found"
        fi
        
        if [[ -f .github/patches/opentelemetry-java-contrib.patch ]]; then
            echo 'patch_otel_java_contrib=true' >> $GITHUB_ENV
            echo "Found opentelemetry-java-contrib.patch"
            wc -l .github/patches/opentelemetry-java-contrib.patch
        else
            echo "No opentelemetry-java-contrib.patch found"
        fi
      shell: bash

    - name: Clone and patch repositories
      run: |
        echo "=== RUNNING PATCH SCRIPT ==="
        echo "Environment variables:"
        echo "patch_otel_java: $patch_otel_java"
        echo "patch_otel_java_contrib: $patch_otel_java_contrib"
        echo "patch_otel_java_instrumentation: $patch_otel_java_instrumentation"
        
        echo "=== CHECKING PATCH SCRIPT ==="
        ls -la .github/scripts/patch.sh
        head -20 .github/scripts/patch.sh
        
        echo "=== EXECUTING PATCH SCRIPT ==="
        set -x
        .github/scripts/patch.sh
        set +x
        
        echo "=== POST-PATCH DIRECTORY LISTING ==="
        ls -la .
      if: ${{ env.patch_otel_java == 'true' ||
              env.patch_otel_java_contrib == 'true' ||
              env.patch_otel_java_instrumentation == 'true' }}
      shell: bash

    # - name: Build opentelemetry-java with tests
    #   uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa #v2
    #   if: ${{ env.patch_otel_java == 'true' && inputs.run_tests != 'false' }}
    #   with:
    #     arguments: build publishToMavenLocal --scan --no-daemon
    #     build-root-directory: opentelemetry-java

    - name: Build opentelemetry-java
      uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa #v2
      if: ${{ env.patch_otel_java == 'true' }}
      with:
        arguments: build publishToMavenLocal --scan --no-daemon --quiet
        build-root-directory: opentelemetry-java
        
    - name: Debug opentelemetry-java build failures
      if: ${{ env.patch_otel_java == 'true' }}
      shell: bash
      run: |
        echo "=== OPENTELEMETRY-JAVA LAST 15000 LINES ==="
        cd opentelemetry-java || exit 1
        find . -name "*.log" -type f | head -1 | xargs -I {} tail -15000 "{}" || echo "No log files found"

    - name: cleanup opentelemetry-java
      run: rm -rf opentelemetry-java
      if: ${{ env.patch_otel_java == 'true' }}
      shell: bash

    # - name: Build opentelemetry-java-contrib with tests
    #   uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa #v2
    #   if: ${{ env.patch_otel_java_contrib == 'true' && inputs.run_tests != 'false' }}
    #   with:
    #     arguments: build publishToMavenLocal --scan --no-daemon
    #     build-root-directory: opentelemetry-java-contrib

    - name: Build opentelemetry-java-contrib
      uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa #v2
      if: ${{ env.patch_otel_java_contrib == 'true' }}
      with:
        arguments: build publishToMavenLocal --scan --no-daemon --quiet
        build-root-directory: opentelemetry-java-contrib
        
    - name: Debug opentelemetry-java-contrib build failures
      if: ${{ env.patch_otel_java_contrib == 'true' }}
      shell: bash
      run: |
        echo "=== OPENTELEMETRY-JAVA-CONTRIB DEBUG INFO ==="
        cd opentelemetry-java-contrib || exit 1
        echo "=== BUILD DIRECTORIES ==="
        find . -name "build" -type d | head -5
        echo "=== GRADLE LOGS ==="
        find ~/.gradle -name "*.log" -type f 2>/dev/null | head -3 | xargs -I {} sh -c 'echo "=== {} ===" && tail -100 "{}"' || echo "No gradle logs found"
        echo "=== BUILD REPORTS ==="
        find . -path "*/build/reports" -type d | head -3 | xargs -I {} find {} -name "*.html" | head -5 || echo "No build reports found"

    - name: cleanup opentelemetry-java-contrib
      run: rm -rf opentelemetry-java-contrib
      if: ${{ env.patch_otel_java_contrib == 'true' }}
      shell: bash

    - name: Build opentelemetry-java-instrumentation
      uses: gradle/gradle-build-action@a8f75513eafdebd8141bd1cd4e30fcd194af8dfa #v2
      if: ${{ env.patch_otel_java_instrumentation == 'true' }}
      with:
        arguments: build publishToMavenLocal -x checkstyleMain --scan --no-daemon --quiet
        build-root-directory: opentelemetry-java-instrumentation
        
    - name: Debug opentelemetry-java-instrumentation build failures
      if: ${{ env.patch_otel_java_instrumentation == 'true' }}
      shell: bash
      run: |
        echo "=== OPENTELEMETRY-JAVA-INSTRUMENTATION DEBUG INFO ==="
        cd opentelemetry-java-instrumentation || exit 1
        echo "=== BUILD DIRECTORIES ==="
        find . -name "build" -type d | head -5
        echo "=== GRADLE LOGS ==="
        find ~/.gradle -name "*.log" -type f 2>/dev/null | head -3 | xargs -I {} sh -c 'echo "=== {} ===" && tail -100 "{}"' || echo "No gradle logs found"
        echo "=== BUILD REPORTS ==="
        find . -path "*/build/reports" -type d | head -3 | xargs -I {} find {} -name "*.html" | head -5 || echo "No build reports found"

    - name: cleanup opentelmetry-java-instrumentation
      run: rm -rf opentelemetry-java-instrumentation
      if: ${{ env.patch_otel_java_instrumentation == 'true' }}
      shell: bash