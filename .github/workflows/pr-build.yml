name: PR Build
on:
  pull_request:
    branches:
      - main
      - "release/v*"

jobs:
  testpatch:
    name: Test patches applied to dependencies
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.pull_request.base.ref, 'release/v') }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - uses: gradle/wrapper-validation-action@v1

      - uses: ./.github/actions/patch-dependencies
        with:
          run_tests: "true"
          branch: ${{ github.event.pull_request.base.ref }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        exclude:
          # Skip windows on patch workflow because it is not possible to build opentelemetry-java on windows
          # when the cache is in a different drive than the source code
          # Windows is not working for patch workflows, therefore we disable it here
          # https://github.com/square/wire/issues/2188
          # https://github.com/open-telemetry/opentelemetry-java/issues/4560
          - os: ${{ startsWith(github.event.pull_request.base.ref, 'release/v') && 'windows-latest' || '' }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - uses: gradle/wrapper-validation-action@v1

      - name: Publish patched dependencies to maven local
        uses: ./.github/actions/patch-dependencies
        if: ${{ startsWith(github.event.pull_request.base.ref, 'release/v') }}
        with:
          branch: ${{ github.event.pull_request.base.ref }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build with Gradle with Integration tests
        uses: gradle/gradle-build-action@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          arguments: build integrationTests --stacktrace -PenableCoverage=true -PlocalDocker=true

      - name: Get current version
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          ADOT_JAVA_VERSION=$(./gradlew properties | grep -P '^version: '| cut -d ' ' -f 2)
          echo "Found ADOT Java Version ${ADOT_JAVA_VERSION}"
          echo "ADOT_JAVA_VERSION=${ADOT_JAVA_VERSION}" >> GITHUB_ENV

      - name: Build image
        uses: docker/build-push-action@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          push: false
          build-args:
             - "ADOT_JAVA_VERSION={{ env.ADOT_JAVA_VERSION }}"
          context: .

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        if: ${{ matrix.os != 'ubuntu-latest' }}
        with:
          arguments: build --stacktrace -PenableCoverage=true
      - uses: codecov/codecov-action@v1
