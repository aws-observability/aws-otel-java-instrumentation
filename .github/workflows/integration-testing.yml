name: Integration Testing
on: [push, pull_request]

jobs:
  build_Java_Agent:
    name: Build AWS OTel Java agent
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 14

      - uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: build --stacktrace -PenableCoverage=true

      - name: Upload agent artifact
        uses: actions/upload-artifact@v2
        with:
          name: aws-opentelemetry-agent.jar
          path: otelagent/build/libs/aws-opentelemetry-agent-*.jar

  build_Web_App:
    name: Build Spring Web Application
    needs: build_Java_Agent
    runs-on: ubuntu-latest

    steps:
      - name: Pull in source code from WebApp Github repo
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework-sample-apps
          token: ${{  secrets.PAT }}

      - uses: actions/setup-java@v1
        with:
          java-version: 14

      - uses: gradle/wrapper-validation-action@v1

      - name: Build Spring boot web app with Gradle
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: build --stacktrace -PenableCoverage=true
          build-root-directory: sample-apps/trace/otel-java-sample-apps/springboot

      - name: Upload web app build artifact
        uses: actions/upload-artifact@v2
        with:
          name: springapp.jar
          path: sample-apps/trace/otel-java-sample-apps/springboot/build/libs/springboot-1.0.jar

  deploy_Test_Java_Agent:
    name: Deploy and Test AWS OTel Java agent
    needs: build_Web_App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download AWS OTel Jave agent jar
        uses: actions/download-artifact@v2
        with:
          name: aws-opentelemetry-agent.jar

      - name: Download Spring Boot App jar
        uses: actions/download-artifact@v2
        with:
          name: springapp.jar

      - uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Setup and Run OTel Collector
        run: |
          docker-compose -f .github/collector/docker-compose.yml up &
        env:
          ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run Spring Boot App with AWS Java agent
        run: |
          agent_jar_name=`ls aws-opentelemetry-agent-*`
          java -javaagent:$agent_jar_name -jar springboot-1.0.jar &
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Directory to checkout test framework
        run: mkdir test-framework

      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: bhautikpip/aws-otel-test-framework
          ref: merge-conflict-trace-validator
          path: test-framework

      - name: Run testing suite
        run: ./gradlew :validator:run --args='-c default-otel-trace-validation.yml --endpoint http://127.0.0.1:8080'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
        working-directory: test-framework
