name: Nightly Snapshot Build
on:
  schedule:
    - cron: "21 3 * * *"
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: us-east-1
  TEST_TAG: public.ecr.aws/aws-observability/adot-autoinstrumentation-java:test

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: gradle/wrapper-validation-action@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Log in to AWS ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws

      - name: Build snapshot with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build --stacktrace -PenableCoverage=true -PtestUpstreamSnapshots=true
        env:
          PUBLISH_USERNAME: ${{ secrets.PUBLISH_USERNAME }}
          PUBLISH_PASSWORD: ${{ secrets.PUBLISH_PASSWORD }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Get current version
        shell: bash
        run: |
          echo ADOT_JAVA_VERSION="$(./gradlew printVersion -q -PtestUpstreamSnapshots=true )" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v4
        with:
          push: false
          build-args: "ADOT_JAVA_VERSION=${{ env.ADOT_JAVA_VERSION }}"
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.TEST_TAG }}

      - name: Test docker image
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          docker volume create operator-volume
          docker run --mount source=operator-volume,dst=/otel-auto-instrumentation adot-java-operator:${{ env.TEST_TAG }} cp /javaagent.jar /otel-auto-instrumentation/javaagent.jar
          docker run -dt --mount source=operator-volume,dst=/otel-auto-instrumentation --name temp  public.ecr.aws/amazonlinux/amazonlinux:latest
          FILENAME = $(docker exec temp /bin/bash -c "ls /otel-auto-instrumentation")
          if [$FILENAME = javaagent.jar]; then
            echo "javaagent.jar file was copied to the operator-volume"
          else 
            echo "error: javaagent.jar file was not copied to the operator-volume"
            exit 1;
          fi
          CHECKSUM = $(docker exec temp /bin/bash -c "sha256sum /otel-auto-instrumentation/javaagent.jar | cut -d' ' -f1")
          if [$CHECKSUM = $ORIG_CHECKSUM]; then
            echo "copied javaagent.jar checksum matched"
          else 
            echo "error: copied javaagent.jar checksum mis-matched"
            exit 1;
          fi

      - name: Upload to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: aws-opentelemetry-agent.jar
          path: otelagent/build/libs/aws-opentelemetry-agent-*.jar
  publish-build-status:
    needs: [build]
    if: ${{ always() }}
    uses: ./.github/workflows/publish-status.yml
    with:
      namespace: 'ADOT/GitHubActions'
      repository: ${{ github.repository }}
      branch: ${{ github.ref_name }}
      workflow: nightly-upstream-snapshot-build
      success: ${{ needs.build.result == 'success' }}
      region: us-west-2
    secrets:
      roleArn: ${{ secrets.METRICS_ROLE_ARN }}

