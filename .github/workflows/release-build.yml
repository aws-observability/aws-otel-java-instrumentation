name: Release Build
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag the release with, e.g., 1.2.0, 1.2.1-alpha.1
        required: true

env:
  AWS_DEFAULT_REGION: us-east-1
  TEST_TAG: public.ecr.aws/aws-observability/adot-autoinstrumentation-java:test

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: gradle/wrapper-validation-action@v1

      - name: Publish patched dependencies to maven local
        uses: ./.github/actions/patch-dependencies
        if: ${{ startsWith(github.ref_name, 'release/v') }}
        with:
          branch: ${{ github.ref_name }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Log in to AWS ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws

      - name: Build release with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build integrationTests final closeAndReleaseSonatypeStagingRepository -Prelease.version=${{ github.event.inputs.version }} -PlocalDocker=true --stacktrace
        env:
          PUBLISH_USERNAME: ${{ secrets.PUBLISH_USERNAME }}
          PUBLISH_PASSWORD: ${{ secrets.PUBLISH_PASSWORD }}
          GRGIT_USER: ${{ secrets.GITHUB_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create checksum
        run: |
          echo ORIG_CHECKSUM="$(shasum otelagent/build/libs/aws-opentelemetry-agent-*.jar | awk '{ print $1 }')" >> "$GITHUB_ENV"

      - name: Build and export to Docker
        uses: docker/build-push-action@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          build-args: "ADOT_JAVA_VERSION=${{ env.ADOT_JAVA_VERSION }}"
          context: .
          load: true
          tags: ${{ env.TEST_TAG }}

      - name: Test docker image
        shell: bash
        run: |
          docker volume create operator-volume
          docker run --mount source=operator-volume,dst=/otel-auto-instrumentation adot-java-operator:${{ env.TEST_TAG }} cp /javaagent.jar /otel-auto-instrumentation/javaagent.jar
          docker run -dt --mount source=operator-volume,dst=/otel-auto-instrumentation --name temp  public.ecr.aws/amazonlinux/amazonlinux:latest
          FILENAME = $(docker exec temp /bin/bash -c "ls /otel-auto-instrumentation")
          if [$FILENAME = javaagent.jar]; then
            echo "javaagent.jar file was copied to the operator-volume"
          else 
            echo "error: javaagent.jar file was not copied to the operator-volume"
            exit 1;
          fi
          CHECKSUM = $(docker exec temp /bin/bash -c "sha256sum /otel-auto-instrumentation/javaagent.jar | cut -d' ' -f1")
          if [$CHECKSUM = $ORIG_CHECKSUM]; then
            echo "copied javaagent.jar checksum matched"
          else 
            echo "error: copied javaagent.jar checksum mis-matched"
            exit 1;
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          push: true
          build-args: "ADOT_JAVA_VERSION=${{ env.ADOT_JAVA_VERSION }}"
          context: .
          platforms: linux/amd64,linux/arm64
          tags: |
            public.ecr.aws/aws-observability/adot-autoinstrumentation-java:${{ env.ADOT_JAVA_VERSION }}, public.ecr.aws/aws-observability/adot-autoinstrumentation-java:latest

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: otelagent/build/libs/aws-opentelemetry-agent-${{ github.event.inputs.version }}.jar
          asset_name: aws-opentelemetry-agent.jar
          asset_content_type: application/java-archive
