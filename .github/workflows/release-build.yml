name: Release Build
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag the release with, e.g., 1.2.0, 1.2.1-alpha.1
        required: true

env:
  AWS_PUBLIC_ECR_REGION: us-east-1
  AWS_PRIVATE_ECR_REGION: us-west-2
  TEST_TAG: public.ecr.aws/aws-observability/adot-autoinstrumentation-java:test-v2
  PUBLIC_REPOSITORY: public.ecr.aws/aws-observability/adot-autoinstrumentation-java
  PRIVATE_REPOSITORY: 020628701572.dkr.ecr.us-west-2.amazonaws.com/adot-autoinstrumentation-java
  PRIVATE_REGISTRY: 020628701572.dkr.ecr.us-west-2.amazonaws.com
  ARTIFACT_NAME: aws-opentelemetry-agent.jar 

permissions:
  id-token: write
  contents: write

jobs:
  build:
    environment: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version-file: .java-version
          distribution: 'temurin'
      - uses: gradle/actions/wrapper-validation@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

      - name: Publish patched dependencies to maven local
        uses: ./.github/actions/patch-dependencies
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_PUBLIC_ECR_REGION }}

      - name: Log in to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Build release with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build integrationTests -PlocalDocker=true -Prelease.version=${{ github.event.inputs.version }} --stacktrace

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN_RELEASE }}
          aws-region: ${{ env.AWS_PUBLIC_ECR_REGION }}

      - name: Log in to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Configure AWS Credentials for Private ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN_RELEASE }}
          aws-region: ${{ env.AWS_PRIVATE_ECR_REGION }}

      - name: Log in to AWS private ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.PRIVATE_REGISTRY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.15.1

      - name: Build image for testing
        uses: docker/build-push-action@v6
        with:
          push: false
          build-args: "ADOT_JAVA_VERSION=${{ github.event.inputs.version }}"
          context: .
          platforms: linux/amd64
          tags: ${{ env.TEST_TAG }}
          load: true

      - name: Test docker image
        shell: bash
        run: .github/scripts/test-adot-javaagent-image.sh "${{ env.TEST_TAG }}" "${{ github.event.inputs.version }}"

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: true
          build-args: "ADOT_JAVA_VERSION=${{ github.event.inputs.version }}"
          context: .
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.PUBLIC_REPOSITORY }}:v${{ github.event.inputs.version }}
            ${{ env.PRIVATE_REPOSITORY }}:v${{ github.event.inputs.version }}

      - name: Build and Publish release with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build final closeAndReleaseSonatypeStagingRepository -Prelease.version=${{ github.event.inputs.version }} --stacktrace
        env:
          PUBLISH_TOKEN_USERNAME: ${{ secrets.PUBLISH_TOKEN_USERNAME }}
          PUBLISH_TOKEN_PASSWORD: ${{ secrets.PUBLISH_TOKEN_PASSWORD }}
          GRGIT_USER: ${{ secrets.GITHUB_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}


      - name: Get SHA256 checksum of release artifact
        id: get_sha256
        run: |
          cp "otelagent/build/libs/aws-opentelemetry-agent-${{ github.event.inputs.version }}.jar" ${{ env.ARTIFACT_NAME }}
          shasum -a 256 ${{ env.ARTIFACT_NAME }} > ${{ env.ARTIFACT_NAME }}.sha256

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          # Create release notes template
          cat > release_notes.md << 'EOF'
          This release contains updates of the following upstream components:

          OpenTelemetry Java - <opentelemetry-java version number - e.g. 1.45.0>
          OpenTelemetry Java Contrib - <opentelemetry-java-contrib version number - e.g. 1.39.0>
          Opentelemetry Instrumentation for Java - <opentelemetry-java-instrumentation version number - e.g. 2.11.0>

          This release also publishes to public ECR and Maven Central.
          * See ADOT Java auto-instrumentation Docker image v${{ github.event.inputs.version }} in our public ECR repository:
          https://gallery.ecr.aws/aws-observability/adot-autoinstrumentation-java
          * See version ${{ github.event.inputs.version }} in our Maven Central repository:
          https://central.sonatype.com/artifact/software.amazon.opentelemetry/aws-opentelemetry-agent
          EOF

          gh release create --target "$GITHUB_REF_NAME" \
             --title "Release v${{ github.event.inputs.version }}" \
             --draft \
             "v${{ github.event.inputs.version }}" \
             ${{ env.ARTIFACT_NAME }} \
             ${{ env.ARTIFACT_NAME }}.sha256
